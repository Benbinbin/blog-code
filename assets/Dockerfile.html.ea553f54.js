import{d as e}from"./app.93fa4a4f.js";const s={},n=e('<h1 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile" aria-hidden="true">#</a> Dockerfile</h1><p>使用命令 <code>docker build</code> 读取 <code>dockerfile</code> 文件，逐行执行相应的命令，最后可以创建出一个新镜像。</p><h2 id="添加文件" tabindex="-1"><a class="header-anchor" href="#添加文件" aria-hidden="true">#</a> 添加文件</h2><p>将宿主机或外部资源添加到容器的指定目录中</p><ul><li><code>ADD</code> 命令支持 URL，支持解析压缩文件，将其中的资源抽取出来</li><li><code>COPY</code> 命令更透明，优先使用</li></ul><h2 id="添加信息" tabindex="-1"><a class="header-anchor" href="#添加信息" aria-hidden="true">#</a> 添加信息</h2><p>为容器添加信息</p><ul><li><code>ENV</code> 命令添加环境变量</li><li><code>LABEL</code> 命令添加元数据</li><li><code>ARG</code> 命令设置构建时 <code>docker build</code> 的参数</li></ul><h2 id="执行命令" tabindex="-1"><a class="header-anchor" href="#执行命令" aria-hidden="true">#</a> 执行命令</h2><p><code>RUN</code> 命令可以执行一些命令代码，例如为容器安装一些依赖.</p><p>可以在 <code>RUN</code> 命令前添加 <code>SHELL</code> 命令，以指定通过哪一个终端执行命令。</p><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code><span class="token comment"># Executed as powershell</span>\n<span class="token instruction"><span class="token keyword">SHELL</span> [<span class="token string">&quot;powershell&quot;</span>, <span class="token string">&quot;-command&quot;</span>]</span>\n<span class="token instruction"><span class="token keyword">RUN</span> Write-Host hello</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>💡 待执行的命令有两种形式：</p><ul><li>shell 形式的命令 <code>&lt;instruction&gt; &lt;param1&gt; &lt;param2&gt; &lt;...&gt; &lt;executable&gt; </code></li><li>exec 形式（推荐）的命令 <code>&lt;instruction&gt; [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;, ...]</code></li></ul><p>例如安装 Python 的两种形式</p><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">RUN</span> apt-get install python3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">RUN</span> [<span class="token string">&quot;apt-get&quot;</span>, <span class="token string">&quot;install&quot;</span>, <span class="token string">&quot;python3&quot;</span>]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>CMD</code> 命令和 <code>ENTRYPOINT</code> 命令也是用以执行一些命令代码</p><ul><li><code>CMD</code> 命令用以解析 <code>docker run &lt;ImageName&gt;</code> 通过镜像创建容器的这一条命令代码</li><li><code>ENTRYPOINT</code> 命令也有类似的作用</li></ul><p>两者还可以结合使用，<code>CMD</code> 命令可以为 <code>ENTRYPOINT</code> 命令传递参数</p><div class="language-docker ext-docker line-numbers-mode"><pre class="language-docker"><code><span class="token instruction"><span class="token keyword">FROM</span> sameersbn/ubuntu:14.04.20161014</span>\n<span class="token comment"># ...</span>\n<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;/sbin/entrypoint.sh&quot;</span>]</span>\n<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;user/sbin/nginx&quot;</span>]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="其他命令" tabindex="-1"><a class="header-anchor" href="#其他命令" aria-hidden="true">#</a> 其他命令</h2><ul><li><code>FROM</code> 命令在 Dockerfile 中的第一行，指定从哪一个基础镜像开始进行构建</li><li><code>EXPOSE</code> 命令设置容器暴露的端口，只有容器暴露的端口才可以用于端口映射</li><li><code>VOLUME</code> 命令指定数据卷</li><li><code>WORKDIR</code> 命令如果在 <code>CMD</code> 命令前运行，就会先进入指定的工作区，再执行后面的代码。工作目录的路径需要以 <code>/</code> 开头，即使用绝对路径</li><li><code>USER</code> 命令指定用户</li><li><code>ONBUILD</code> 命令是在当前镜像被引用，即其他镜像使用 <code>FROM</code> 命令，将其作为基础镜像使用时，会触发执行的命令</li><li><code>STOPSIGNAL</code> 命令设置停止容器会发出的信号</li></ul>',23);s.render=function(e,s){return n};export default s;
