import{d as n}from"./app.93fa4a4f.js";const s={},e=n('<h1 id="git-样式指南" tabindex="-1"><a class="header-anchor" href="#git-样式指南" aria-hidden="true">#</a> Git 样式指南</h1><h2 id="提交说明-commit-messages" tabindex="-1"><a class="header-anchor" href="#提交说明-commit-messages" aria-hidden="true">#</a> 提交说明 commit messages</h2><p>参考：<a href="./attachments/git-commit-message-guide-CN.pdf">Git 提交信息样式指南</a> | <a href="https://s3.cn-north-1.amazonaws.com.cn/static-documents/nd001/Udacity+Nanodegree+Style+Guide_CSS_EN.pdf" target="_blank" rel="noopener noreferrer">英文版</a></p><p>提交说明 commit messages 对于解释你为什么要这样修改代码至关重要。不仅供同事或协作者查看，还供你自己将来查看</p><p>格式</p><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>类型：主题\n\n正文\n\n脚注\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><code>类型</code> 提示该次提交代码的主要功能，常见类型： <ul><li><code>feature</code> 新功能</li><li><code>fix</code> 错误修复</li><li><code>docs</code> 文档修改</li><li><code>style</code> 格式、分号缺失等，代码无变动</li><li><code>refactor</code> 生产代码重构</li><li><code>test</code> 测试添加、测试重构等，生产代码无变动</li><li><code>chore</code> 构建任务更新、程序包管理器配置等，生产代码无变动</li></ul></li><li><code>主题</code> 简要说明更改的内容。不应超过 50 个字符，首字母大写，不以句点结尾。不建议使用“修复”或“执行了某些操作”这类字眼</li><li><code>正文</code> 更详细地描述你进行更改的原因。每行通常包含 72 个字符左右（确保在命令行上使用 git 时，能够在终端窗口中显示出来）。确保主题和正文之间有一个空行。当需要创建列表时，也可以使用星号 <code>*</code> 或短横线 <code>-</code> 添加项目符号。有些提交的说明中不需要正文。例如，如果更正一个拼写错误，可以只有一个主题行。</li><li><code>脚注</code> 通常用于指示此提交解决哪些问题或错误</li></ul><div class="language-markdown ext-md line-numbers-mode"><pre class="language-markdown"><code>feature: 用 50 个或更少字符总结改动\n\n如有必要，提供更详细的阐释文本。将其限制在 72 个字符左右。\n有些情况下，第一行被视为提交的主题，其余文本被视为正文。\n将摘要与正文分隔开的空行至关重要（除非你完全省略正文）；如果不分隔摘要和正文，会使 <span class="token code-snippet code keyword">`log`</span>、<span class="token code-snippet code keyword">`shortlog`</span> 和 <span class="token code-snippet code keyword">`rebase`</span> 等工具可能无法识别。\n\n解释此次提交要解决的问题。\n重点是为什么要进行此次改动而不是如何改动（代码会说明这一点）。\n此次改动是否有任何副作用或其他不太直观的后果？可在此处解释这些方面。\n\n空行后面可以有更多段落。\n\n <span class="token list punctuation">-</span> 还可以使用项目符号分项列出\n\n <span class="token list punctuation">-</span> 通常使用连字符或星号作为项目符号，前面有一个空格，中间是一些空行，但惯例不尽相同\n\n如果你使用问题跟踪器，请在底部提供对问题的引用，\n例如：\n解决：# 123\n另请参见：# 456、# 789\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>💡 如果你从事的是一个开源项目，请务必遵守该项目的说明格式。这会让维护者的工作更轻松，并增加你的合并请求被接受的机会。</p>',9);s.render=function(n,s){return e};export default s;
