import{o as l,c as n,F as e,a as t,b as i}from"./app.93fa4a4f.js";const o={},r=t("h1",{id:"git-基础",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#git-基础","aria-hidden":"true"},"#"),i(" Git 基础")],-1),c=t("p",null,[i("参考："),t("a",{href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"},"Git Book")],-1),a=t("p",null,[i("Git 是一个"),t("strong",null,"分布式"),i("版本控制系统，其核心功能是"),t("strong",null,"追踪文件的变更"),i("，即保留项目的详细"),t("strong",null,"历史记录"),i("，并且能够在不同的版本上进行工作。保留详细的项目历史记录很重要，可以看出一段时间内项目的进度，如果需要还可以并恢复数据或文件，回到项目的某个阶段。")],-1),u=t("p",null,[i("版本控制系统 version control system，简称 VCS，是一个管理源代码不同版本的工具，除了 Git 软件外还有其他版本控制系统，如 "),t("a",{href:"https://subversion.apache.org/",target:"_blank",rel:"noopener noreferrer"},"Subversion"),i("、"),t("a",{href:"https://www.mercurial-scm.org/",target:"_blank",rel:"noopener noreferrer"},"Mercurial"),i(" 等。版本控制系统模型包括两大主要类型：")],-1),s=t("ul",null,[t("li",null,[t("strong",null,"集中式模型"),i(" centralized version control systems, CVCS：所有用户都连接到一个中央的主仓库 "),t("code",null,"master repository")]),t("li",null,[t("strong",null,"分布式模型"),i(" distributed version control systems, DVCS：每个用户都在自己的计算机上拥有完整的仓库")])],-1),d=t("p",null,'💡 源代码管理器 source code manager，简称 SCM，是版本控制系统的另一个名称。Git 是一个 SCM（因此也是 VCS！）。Git 网站地址是 https://git-scm.com/ （它的域名中直接包含 "SCM"）。',-1),m=t("h2",{id:"术语",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#术语","aria-hidden":"true"},"#"),i(" 术语")],-1),g=t("p",null,[i("参考："),t("a",{href:"./attachments/Git-terms-cheatsheet.pdf"},"Git 关键术语"),i(" | "),t("a",{href:"./attachments/ud123-git-keyterms.pdf"},"英文版")],-1),h=t("h3",{id:"提交-commit",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#提交-commit","aria-hidden":"true"},"#"),i(" 提交 commit")],-1),p=t("p",null,[i("Git 将数据看做微型文件系统的一组"),t("strong",null,"快照"),i("。每次 commit （在 Git 中保持项目状态）它都对文件当时的状况拍照，并存储对该快照的引用，类似游戏中的保存点，它会保存项目的文件和关于文件的所有信息。commit 是 Git 中的基本单位。")],-1),b=t("h3",{id:"仓库-repository-repo",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#仓库-repository-repo","aria-hidden":"true"},"#"),i(" 仓库 Repository / repo")],-1),f=t("p",null,[i("仓库是一个包含项目内容以及几个文件（在 Mac OS X 上默认地处于"),t("strong",null,"隐藏状态"),i("）的目录，用来与 Git 进行通信。仓库可以存储在本地，或作为远程副本存储在其他计算机上。仓库是由 commit 构建的。")],-1),k=t("h3",{id:"工作目录-工作区-working-directory",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#工作目录-工作区-working-directory","aria-hidden":"true"},"#"),i(" 工作目录/工作区 Working Directory")],-1),_=t("p",null,"工作目录是你在计算机的文件系统中看到的文件。与这些文件形成对比的是保持在仓库中（在 commit 中，在 Mac OS X 上隐藏）的文件。",-1),E=t("p",null,"注意：在使用 Git 时，工作目录与命令行工具的 current working directory （当前工作目录）不一样，后者是 shell 当前正在查看的目录。",-1),A=t("h3",{id:"检出-checkout",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#检出-checkout","aria-hidden":"true"},"#"),i(" 检出 Checkout")],-1),x=t("p",null,[i("检出是指将仓库中的内容"),t("strong",null,"复制"),i("到工作目录下。")],-1),w=t("h3",{id:"暂存区-暂存索引-索引-staging-area-staging-index-index",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#暂存区-暂存索引-索引-staging-area-staging-index-index","aria-hidden":"true"},"#"),i(" 暂存区/暂存索引/索引 Staging Area/Staging Index/Index")],-1),G=t("p",null,[i("Git 目录下的一个文件，"),t("strong",null,"存储的是即将进入下个 commit 内容的信息"),i("。可以将暂存区看做准备工作台，Git 将在此区域获取下个 commit。暂存索引中的文件是准备添加到仓库中的文件。")],-1),B=t("h3",{id:"sha",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#sha","aria-hidden":"true"},"#"),i(" SHA")],-1),H=t("p",null,[t("code",null,"SHA"),i(" 是每个 commit 的 ID 编号。以下是 commit 的 "),t("code",null,"SHA"),i(" 示例："),t("code",null,"e2adf8ae3e2e4ed40add75cc44cf9d0a869afeb6"),i("。")],-1),S=t("p",null,[i("它是一个"),t("strong",null,"长 40 个字符的字符串（由 0–9 和 a–f 组成），并根据 Git 中的文件或目录结构的内容计算得出"),i('。SHA 的全称是 "Secure Hash Algorithm" 安全哈希算法。')],-1),v=t("h3",{id:"分支-branch",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#分支-branch","aria-hidden":"true"},"#"),i(" 分支 Branch")],-1),D=t("p",null,"分支是从主开发流程中分支出来的新的开发流程。这种分支开发流程可以在不更改主流程的情况下继续延伸下去。",-1),y=t("p",null,[i("回到之前关于游戏保存点的示例，你可以将分支看做在游戏中设立保存点后，尝试一个有风险的招式。如果有风险的招式不奏效，则回到保存的位置。"),t("strong",null,"令分支非常强大的关键之处是你可以在一个分支上设定保存点，然后切换到另一个分支并继续设定保存点。")],-1),C=t("h2",{id:"git-三大区域",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#git-三大区域","aria-hidden":"true"},"#"),i(" Git 三大区域")],-1),j=t("p",null,"Git 管理着三大区域，文件就在这三个区域之间移动：",-1),F=t("ul",null,[t("li",null,[t("strong",null,"工作区域 working directory"),i("：在工作区域对文件进行修改")]),t("li",null,[t("strong",null,"暂存区 staging index"),i("：暂存等待保存进入仓库的文件")]),t("li",null,[t("strong",null,"仓库 repository"),i("：通过 "),t("code",null,"commit"),i(" 命令将修改过或新建的且已在暂存区的文件保存到仓库中，每个 commit 都有唯一的 ID，即 SHA，可以通过相应的 ID 访问特定的提交")])],-1),M=t("h2",{id:"基本终端命令",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#基本终端命令","aria-hidden":"true"},"#"),i(" 基本终端命令")],-1),I=t("p",null,"Git 操作在 Git Bash 终端中进行，常用的命令：",-1),$=t("ul",null,[t("li",null,[t("code",null,"ls"),i(" 列出当前目录的文件（夹），当前目录")]),t("li",null,[t("code",null,"mkdir"),i(" 新建目录")]),t("li",null,[t("code",null,"cd"),i(" 更改目录")]),t("li",null,[t("code",null,"rm"),i(" 删除文件和目录")]),t("li",null,[t("code",null,"pwd"),i(" 输出工作目录（绝对路径）")])],-1),z=t("h2",{id:"新建仓库",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#新建仓库","aria-hidden":"true"},"#"),i(" 新建仓库")],-1),R=t("p",null,"参考：",-1),V=t("ul",null,[t("li",null,[t("a",{href:"https://git-scm.com/docs/git-init",target:"_blank",rel:"noopener noreferrer"},"git init 文档")]),t("li",null,[t("a",{href:"https://www.atlassian.com/git/tutorials/setting-up-a-repository",target:"_blank",rel:"noopener noreferrer"},"git init 教程")])],-1),N=t("p",null,[i("在对 Git 仓库进行 commit 或执行任何其他操作之前，需要一个实际存在的仓库。使用 "),t("code",null,"git init"),i(" 命令新建一个仓库")],-1),L=t("div",{class:"language-bash ext-sh line-numbers-mode"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token comment"},"# 任务"),i("\n"),t("span",{class:"token comment"},"# 创建一个目录 udacity-git-course"),i("\n"),t("span",{class:"token comment"},"# 在该目录中创建另一个目录 new-git-project"),i("\n"),t("span",{class:"token comment"},"# 切换当前路径到 new-git-project 目录下"),i("\n\n"),t("span",{class:"token comment"},"# 创建目录并切换到目录"),i("\n"),t("span",{class:"token function"},"mkdir"),i(" -p udacity-git-course/new-git-project "),t("span",{class:"token operator"},"&&"),i(),t("span",{class:"token builtin class-name"},"cd"),i(),t("span",{class:"token variable"},"$_"),i("\n\n"),t("span",{class:"token comment"},"# 在当前目录下初始化生成一个空的 Git 仓库，创建成功后终端提示符会添加 master 关键字"),i("\n"),t("span",{class:"token function"},"git"),i(" init\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br"),t("span",{class:"line-number"},"10"),t("br")])],-1),T=t("ul",null,[t("li",null,[i("创建目录 "),t("code",null,"mkdir"),i(" 设置的参数 "),t("code",null,"-p"),i(" 表示如果目录已存在则不会报错，递归创建")]),t("li",null,[i("在 Git Bash 里复制操作快捷键为 "),t("code",null,"Ctrl + Insert"),i(" 粘贴快捷键为 "),t("code",null,"Shift + Insert")]),t("li",null,[i("命令 "),t("code",null,"$_"),i(" 扩展到上一个命令的最后一个参数，或上一个命令（若上一个命令没有设置参数时）")])],-1),U=t("p",null,[t("img",{src:"/blog-code/assets/20191121231306446_13742.95ae88ad.png",alt:"新建仓库"})],-1),W=t("p",null,[t("code",null,"git init"),i(" 命令的作用是在"),t("strong",null,"当前目录"),i("下初始化生成一个空的 Git 仓库，并将所有用于跟踪内容所必要文件和目录存储于 "),t("code",null,".git"),i("目录下（该目录开头有个点 "),t("code",null,"."),i("，表示在 Mac/Linux 上它将是一个隐藏目录）。"),t("code",null,".git"),i(" 目录实际就是一个"),t("strong",null,"存储项目（当前目录下的项目）各版本的库"),i("，Git 会将所有 commit 记录在这里，并跟踪所有内容！")],-1),O=t("p",null,[t("img",{src:"/blog-code/assets/20191121233723215_2414.4c1a649d.png",alt:"git仓库"})],-1),Q=t("p",null,[i("⚠️ "),t("strong",null,"请勿直接修改 .git 目录下的任何文件"),i("。这是仓库的核心。如果你更改了文件名或文件内容，Git 可能就无法跟踪你保存在仓库中的文件，可能会丢失很多内容！可以查看这些文件，但是请勿编辑或删除这些文件。")],-1),X=t("p",null,[t("img",{src:"/blog-code/assets/20191123114129288_29132.6fd3a1d6.png",alt:"git核心"})],-1),q=t("p",null,[t("code",null,".git"),i(" 中各项内容及作用：")],-1),Y=t("ul",null,[t("li",null,[t("code",null,"config"),i(" 文件：存储了所有与项目有关的配置设置，配置文件设置的配置值仅适用于当前仓库")]),t("li",null,[t("code",null,"description"),i(" 文件：此文件仅用于 GitWeb 程序，可忽略")]),t("li",null,[t("code",null,"hooks"),i(" 目录：存放客户端或服务器端脚本，以便用来连接到 Git 的不同生命周期事件")]),t("li",null,[t("code",null,"info"),i(" 目录：包含"),t("strong",null,"全局排除文件")]),t("li",null,[t("code",null,"objects"),i(" 目录：存储提交的所有 commit")]),t("li",null,[t("code",null,"refs"),i(" 目录：此目录存储了指向 commit 的指针（通常是「分支」和「标签」）")])],-1),J=t("h2",{id:"克隆仓库",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#克隆仓库","aria-hidden":"true"},"#"),i(" 克隆仓库")],-1),K=t("p",null,"参考：",-1),P=t("ul",null,[t("li",null,[t("a",{href:"https://git-scm.com/docs/git-clone",target:"_blank",rel:"noopener noreferrer"},"git 克隆文档")]),t("li",null,[t("a",{href:"https://www.atlassian.com/git/tutorials/setting-up-a-repository",target:"_blank",rel:"noopener noreferrer"},"git 克隆教程")])],-1),Z=t("p",null,[i("克隆仓库是制作完全相同的仓库副本，如在制作 Web 项目可以克隆模板，简化配置步骤。使用 "),t("code",null,"git clone [url]"),i(" 命令并传入需要克隆的 Git 仓库的路径（通常是 URL），以创建仓库副本。")],-1),ll=t("p",null,[i("⚠️ 请在克隆任何内容之前"),t("strong",null,"验证终端位置"),i("，通过输入 "),t("code",null,"pwd"),i(" 命令查询工作目录，确保命令行工具已定位于正确的目录下。由于"),t("strong",null,"无法创建嵌套的 Git 仓库"),i("，因此需要确保终端的当前工作目录没有位于 Git 仓库中。")],-1),nl=t("p",null,[i("克隆项目会新建一个目录，并在这个目录下初始化一个 "),t("code",null,".git"),i(" 文件夹，从远程仓库拉取下所有数据放入 "),t("code",null,".git"),i(" 文件夹，然后从中"),t("strong",null,"读取最新版本的文件"),i("的拷贝到新建目录下。")],-1),el=t("div",{class:"language-bash ext-sh line-numbers-mode"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token comment"},"# 切换当前目录至合理位置（无 Git 仓库），如 udcity-git-course"),i("\n$ "),t("span",{class:"token function"},"git"),i(" clone https://github.com/udacity/course-git-blog-project\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br")])],-1),tl=t("p",null,[t("img",{src:"/blog-code/assets/20191123115144238_16955.967e2b2c.png",alt:"克隆仓库"})],-1),il=t("p",null,[t("img",{src:"/blog-code/assets/20191123120142305_5017.2cbeb5c0.png",alt:"course_git_blog_poject"})],-1),ol=t("p",null,[i("💡 在克隆仓库时，会在当前目录下创建一个同名目录，若需要自定义本地仓库的名字，可在运行上述命令结束后手动重命名；或在终端上使用 "),t("code",null,"mv"),i(" 重命名；或在克隆时指定本地创建的仓库名字 "),t("code",null,"git clone [url] project_name")],-1),rl=t("p",null,[i("💡 使用 "),t("code",null,"git clone"),i(" 命令会在当前工作目录下创建新的仓库，但 shell 工作目录并不改变（根据终端的提示符进行判断 shell 当前所在的目录），如果位于 Git 仓库目录下，提示符将包含一个用小括号包含的关键字 "),t("code",null,"master"),i("（或其他分支的名称）。"),t("strong",null,[i("克隆结束后需要使用 "),t("code",null,"cd"),i(" 命令")]),i("切换到新的仓库中，才可以对仓库进行后续操作。")],-1),cl=t("h2",{id:"仓库状态",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#仓库状态","aria-hidden":"true"},"#"),i(" 仓库状态")],-1),al=t("p",null,"参考：",-1),ul=t("ul",null,[t("li",null,[t("a",{href:"https://git-scm.com/docs/git-status",target:"_blank",rel:"noopener noreferrer"},"git status 文档")]),t("li",null,[t("a",{href:"https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-status",target:"_blank",rel:"noopener noreferrer"},"git status 教程")])],-1),sl=t("p",null,[i("命令 "),t("code",null,"git status"),i(" 查询仓库状态，返回关于仓库的信息：")],-1),dl=t("ul",null,[t("li",null,"目前所在的分支"),t("li",null,"已在工作目录中被创建但 Git 尚未开始跟踪的新文件"),t("li",null,"Git 正在跟踪的已修改文件"),t("li",null,"……")],-1),ml=t("p",null,[t("img",{src:"/blog-code/assets/20191123163009784_14633.1f086d28.png",alt:"克隆仓库状态"})],-1),gl=t("ul",null,[t("li",null,[t("code",null,"On branch master"),i(" 表示 Git 位于 "),t("code",null,"master"),i(" 分支（默认分支）上")]),t("li",null,[t("code",null,"Your branch is up-to-date with 'origin/master'."),i(" 由于该仓库是从远程仓库克隆而创建的，这部分告诉我们项目是否与所复制的仓库"),t("strong",null,"保持同步状态"),i("（目前显示是最新状态）")]),t("li",null,[t("code",null,"nothing to commit, working directory clean"),i(" 表示没有任何待定（提交到仓库）的更改")])],-1),hl=t("p",null,[t("img",{src:"/blog-code/assets/20191123165430232_5740.e8ba8e0e.png",alt:"新建仓库状态"})],-1),pl=t("p",null,[i("新建仓库状态与克隆所建（有内容的）仓库类似，但是由于其并未包含任何 commit 所以会返回 "),t("code",null,"No commits yet"),i(" 的信息")],-1),bl=t("ul",null,[t("li",null,[i("应该在任何一个其他 git 命令之前和之后运行 "),t("code",null,"git status"),i(" 命令，确保修改得到了正确的处理（提交）")]),t("li",null,[i("在一段时间之后再回到某个项目时，始终先运行 "),t("code",null,"git status"),i(" 命令以检出该项目，并初步了解仓库的操作信息")])],-1),fl=t("h2",{id:"查看仓库历史",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#查看仓库历史","aria-hidden":"true"},"#"),i(" 查看仓库历史")],-1),kl=t("p",null,[i("在版本控制中应该"),t("strong",null,"频繁"),i("提交"),t("strong",null,"详细"),i("的记录，以便追踪项目逐步进展情况。Git 会自动记录创建提交时的日期时间和所作的内容更改，用户只需要设置每次 commit 标题或说明。")],-1),_l=t("p",null,[i("使用命令 "),t("code",null,"git log"),i(" 或 "),t("code",null,"git show"),i(" 查看查看仓库历史记录：")],-1),El=t("ul",null,[t("li",null,[t("code",null,"git log"),i(" 显示仓库中所有 commit 的信息")]),t("li",null,[t("code",null,"git show"),i(" 显示有关给定 commit 的信息，因此需要提供所需查询的 commit ID（即 SHA）")])],-1),Al=t("h3",{id:"命令-git-log",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#命令-git-log","aria-hidden":"true"},"#"),i(" 命令 "),t("code",null,"git log")],-1),xl=t("p",null,[t("img",{src:"/blog-code/assets/20191123200309211_1022.1ae34513.png",alt:"git log"})],-1),wl=t("p",null,[i("命令 "),t("code",null,"git log"),i(" 默认情况下返回 commit 的以下信息：")],-1),Gl=t("ul",null,[t("li",null,"SHA：每个 commit 的完整 SHA。每个 SHA 都是唯一的（即每个 commit 都产生独一无二标记），一般不需要查看整个 SHA，只需知道前 6-8 个字符即可"),t("li",null,[i("作者：即提交信息，可在 "),t("code",null,"user.name"),i(" 中设置")]),t("li",null,"日期"),t("li",null,"消息：提交者填写的注释信息，以描述该次 commit 的作用。")],-1),Bl=t("h4",{id:"选项-oneline",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#选项-oneline","aria-hidden":"true"},"#"),i(" 选项 "),t("code",null,"--oneline")],-1),Hl=t("p",null,[i("命令 "),t("code",null,"git log"),i(" 可以设置选项 "),t("code",null,"--oneline"),i(" 以显示简化版的历史信息，"),t("strong",null,"每个 commit 显示一行"),i("，包括该提交的 SHA 的前七个字符，以及提交说明")],-1),Sl=t("h4",{id:"选项-stat",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#选项-stat","aria-hidden":"true"},"#"),i(" 选项 "),t("code",null,"--stat")],-1),vl=t("p",null,[i("命令 "),t("code",null,"git log"),i(" 可以设置选项 "),t("code",null,"--stat"),i("（代表 statistics 统计）以显示 commit 中"),t("strong",null,"被更改的文件以及添加或删除的行数"),i("。以 "),t("code",null,"+"),i(" 或 "),t("code",null,"-"),i(" 号表示添加或删除的行数，最后显示一个摘要包含修改/删除的总文件数和总行数。")],-1),Dl=t("p",null,[t("img",{src:"/blog-code/assets/20191123203614812_13539.0db15a6a.png",alt:"列出了被更改的文件以及添加或删除的行数"})],-1),yl=t("h4",{id:"选项-p",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#选项-p","aria-hidden":"true"},"#"),i(" 选项 "),t("code",null,"-p")],-1),Cl=t("p",null,[i("命令 "),t("code",null,"git log"),i(" 可以设置"),t("a",{href:"https://git-scm.com/docs/git-diff#_generating_patches_with_p",target:"_blank",rel:"noopener noreferrer"},"选项"),i(),t("code",null,"-p"),i("（或 "),t("code",null,"--p"),i("），代表 patch 修补，以显示具体的修改内容，以对比形式 "),t("code",null,"diff"),i(" 列出。")],-1),jl=t("p",null,[t("img",{src:"/blog-code/assets/20191123212454417_31704.a185089f.png",alt:"查看修改内容"})],-1),Fl=t("ul",null,[t("li",null,[i("🔵 "),t("code",null,"diff"),i(" 标注行表示正在对比的文件（可能是文件名文件，但也支持追踪重命名后的两个同源文件），其中第一版（原版）文件以目录 "),t("code",null,"a"),i(" 表示，第二版文件以目录 "),t("code",null,"b"),i(" 表示（这两个 "),t("code",null,"a"),i("、"),t("code",null,"b"),i(" 目录并不会在库里实际可见），下方 "),t("code",null,"--- a/index.html"),i(" 和 "),t("code",null,"+++ b/index.html"),i(" 表意一样")]),t("li",null,[i("🔶 "),t("code",null,"index"),i(" 标注行表示文件第一版的哈希值 "),t("code",null,"0382322"),i(" 和第二版的哈希值 "),t("code",null,"43f5b28"),i("（与 SHA 不同）通常不重要可忽略")]),t("li",null,[i("❤️ "),t("code",null,"---"),i(" 表示旧版本，"),t("code",null,"+++"),i(" 表示当前版本")]),t("li",null,[i("🔍 "),t("code",null,"@@"),i(" 标注行展示代码定位和数量，"),t("code",null,"-"),i(" 表示原版本，"),t("code",null,"+"),i(" 表示当前版本。他们后面两个数字分别表示：第一个数字是起始代码的位置（行号），第二个数字表示显示代码的数量（行数） "),t("ul",null,[t("li",null,[t("code",null,"-15,83"),i(" 表示旧版本代码从第 15 行开始，显示了 83 行（即原始版本截取了 83 行代码显示）")]),t("li",null,[t("code",null,"+15,85"),i(" 表示当前版本从第 15 行开始，由于增添了代码，所以第二版本显示了 85 行")])])]),t("li",null,[i("✏️ 代码行中显示了在 commit 中实际进行的更改 "),t("ul",null,[t("li",null,[i("代码行开头标注减号 "),t("code",null,"-"),i(" 表示该行在文件原始版本中，但是被 commit 删除的行")]),t("li",null,[i("代码行开头标注加号 "),t("code",null,"+"),i(" 表示该行是 commit 新加的行")])])])],-1),Ml=t("p",null,[i("💡 "),t("strong",null,"Git 以行为单位追踪修改，对于行的操作可以是删除会插入"),i("。但实际操作可能只是增添了一个空格或缩进（而非把整一行删除后在插入），而补丁输出显示所有行先被删掉，然后在新的缩进位置又被重新添加。可以对命令 "),t("code",null,"git log -p"),i(" 设置选项 "),t("code",null,"-w"),i(),t("strong",null,"忽略空格更改"),i("，在查询具体代码修改时不显示这一类的更改")],-1),Il=t("h3",{id:"命令-git-show",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#命令-git-show","aria-hidden":"true"},"#"),i(" 命令 "),t("code",null,"git show")],-1),$l=t("p",null,[i("使用命令 "),t("code",null,"git log"),i(" 查询所有的 commit（也通过设置参数提供 SHA，作为最后一个参数，只需提供七个字符，只显示在所提供的 SHA "),t("strong",null,"之前提交的所有 commit 信息"),i("）。若只需查看特定一个 commit 可以使用命令 "),t("code",null,"git show"),i("，默认显示最近依次 commit，可以将 SHA 作为最后一个参数，访问特定的 commit。")],-1),zl=t("p",null,[i("默认显示信息和命令 "),t("code",null,"git log -p"),i(" 类似：")],-1),Rl=t("ul",null,[t("li",null,"commit"),t("li",null,"作者"),t("li",null,"日期"),t("li",null,"commit 消息"),t("li",null,"补丁信息")],-1),Vl=t("p",null,"此外该命令也可以设置类似的选项：",-1),Nl=t("ul",null,[t("li",null,[t("code",null,"--stat"),i(" 显示更改了多少文件，以及添加/删除的行数")]),t("li",null,[t("code",null,"-p"),i(" 或 "),t("code",null,"--patch"),i(" - 显示默认补丁信息")]),t("li",null,[t("code",null,"-w"),i(" 忽略空格变化")])],-1),Ll=t("h2",{id:"添加-commit",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#添加-commit","aria-hidden":"true"},"#"),i(" 添加 commit")],-1),Tl=t("p",null,"为了让 git 跟踪项目的新建的文件，要将这些文件提交到仓库。",-1),Ul=t("p",null,"但是提交文件需要先放入暂存区，因此流程为：",-1),Wl=t("ol",null,[t("li",null,[i("在"),t("strong",null,"工作区"),i("的修改需要使用命令 "),t("code",null,"git.add"),i(" 将它们添加到"),t("strong",null,"暂存区"),i(" stage")]),t("li",null,[i("使用命令 "),t("code",null,"git.commit"),i(" 将暂存区文件提交到"),t("strong",null,"仓库")])],-1),Ol=t("h3",{id:"添加到暂存区",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#添加到暂存区","aria-hidden":"true"},"#"),i(" 添加到暂存区")],-1),Ql=t("p",null,[i("命令 "),t("code",null,"git add"),i(" 将新建或修改文件添加到暂存区，在添加暂存区之前应该使用命令 "),t("code",null,"git status"),i(" 查看工作区作出了几个更改（文件）")],-1),Xl=t("p",null,[t("img",{src:"/blog-code/assets/20191124103332766_8414.b3c0bec7.gif",alt:"将工作区文件添加到暂存区"})],-1),ql=t("p",null,[i("在目录 "),t("code",null,"new-git-project"),i(" 仓库中新建了三个文件 "),t("code",null,"index.html"),i("、"),t("code",null,"css/app.css"),i("、"),t("code",null,"js/app.js"),i("，将其添加到暂存区 stage 中")],-1),Yl=t("p",null,[t("img",{src:"/blog-code/assets/20191124102942971_15126.5ceabd98.png",alt:"新建文件后查看 git status"})],-1),Jl=t("p",null,[i("新建三个文件后使用命令 "),t("code",null,"git status"),i(" 输出提示为 "),t("code",null,"Untracked files"),i(" 包含这三个文件，即 git 还没有跟踪这些文件。")],-1),Kl=t("p",null,[t("img",{src:"/blog-code/assets/20191124103620980_30568.903a8021.png",alt:"暂存 html 文件"})],-1),Pl=t("p",null,[i("使用命令 "),t("code",null,"git add <file>"),i(" 将 "),t("code",null,"<file>"),i(" 文件添加到暂存区。使用命令 "),t("code",null,"git status"),i(" 查询输出显示 "),t("code",null,"index.html"),i(" 现在位于 "),t("code",null,'"Changes to be committed"'),i(" 分类下（该区域显示了位于暂存区的文件，这些文件等待 commit）")],-1),Zl=t("p",null,[i("⚠️ "),t("code",null,'"Changes to be committed"'),i(" 下方的帮助文本提示当不小心运行了 "),t("code",null,"git add"),i(" 将文件错误地添加到了暂存区，可使用该命令将文件从暂存区删掉（但该操作与 shell 的 "),t("code",null,"rm"),i(" 命令不同），"),t("code",null,"unstage"),i(" 是指撤销暂存把文件移回工作区，"),t("strong",null,"并不破坏文件"),i("；相应的将文件从工作目录移到暂存区叫做 "),t("code",null,"staging"),i("暂存；如果已移动文件，则叫做 "),t("code",null,"staged"),i(" 已暂存。")],-1),ln=t("div",{class:"language-bash ext-sh line-numbers-mode"},[t("pre",{class:"language-bash"},[t("code",null,[t("span",{class:"token comment"},"# 将 <file> 文件从暂存区删除，"),i("\n$ "),t("span",{class:"token function"},"git"),i(),t("span",{class:"token function"},"rm"),i(" --cached "),t("span",{class:"token operator"},"<"),i("file"),t("span",{class:"token operator"},">"),i("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br")])],-1),nn=t("p",null,[t("img",{src:"/blog-code/assets/20191124105254052_214.0759d28b.png",alt:"暂存剩余的所有文件"})],-1),en=t("ul",null,[t("li",null,[i("命令 "),t("code",null,"git add <file1> <file2> … <fileN>"),i(" 可接受多个文件名，用空格 Space 分隔")]),t("li",null,[i("命令 "),t("code",null,"git add ."),i(" 使用句点 "),t("code",null,"."),i(" 来代替文件列表，添加当前目录（包含的所有文件以及所有嵌套文件）至暂存区")])],-1),tn=t("h3",{id:"添加到仓库",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#添加到仓库","aria-hidden":"true"},"#"),i(" 添加到仓库")],-1),on=t("p",null,[i("使用命令 "),t("code",null,"git commit"),i(" 将暂存区的（修改后）文件添加到仓库。运行命令后 git 会调用并打开"),t("strong",null,"代码编辑器"),i("，此时终端会冻结，以等待用户完成在代码编辑器中输入 Commit 消息解释说明；待用户关闭编辑器窗口，终端再输出该次 commit 信息并完成提交")],-1),rn=t("p",null,[i("在 Shell 终端输入命令 "),t("code",null,"git commit"),i(" 后 git 打开预设的代码编辑器 Visual Studio Code（默认打开内置的代码编辑器 Vim，可在 Git 配置中设置")],-1),cn=t("p",null,[i("参考："),t("a",{href:"https://help.github.com/articles/associating-text-editors-with-git/",target:"_blank",rel:"noopener noreferrer"},"将文本编辑器与 git 相关联")],-1),an=t("p",null,[t("img",{src:"/blog-code/assets/20191124125623360_3929.5e072f5f.png",alt:"在代码编辑器 VS Code 中输入 commit 消息"})],-1),un=t("ul",null,[t("li",null,[i("代码编辑器打开的文件提供能注释，指导填写 commit 信息： "),t("ul",null,[t("li",null,"第一段精确地告诉了我们需要执行的操作，为该 commit 提供一条消息"),t("li",null,[i("任何以字符 "),t("code",null,"#"),i(" 开头的行将被忽略")]),t("li",null,[i("这将是初始提交 "),t("code",null,"Initial commit")]),t("li",null,"最后列出了提交 commit 的文件列表")])]),t("li",null,[i("在代码编辑器第一行输入这次的 commit 信息为 "),t("code",null,"Initial commit"),i(" 以表示这是首次提交")]),t("li",null,"关闭 git commit 命令打开的代码编辑器窗口（关闭面板/标签页是不够的）")],-1),sn=t("p",null,[t("img",{src:"/blog-code/assets/20191124133550964_11673.b0d3a581.png",alt:"提交后终端输出 commit 信息"})],-1),dn=t("p",null,"关闭代码编辑器后终端显示了这次 commit 的信息，包括这次提交对应的 SHA、修改的文件数、更改的代码行数以及被添加的具体文件。",-1),mn=t("p",null,[i("💡 如果你要编写的提交说明很简短，可以直接在命令 "),t("code",null,"git commit"),i(" 设置选项 "),t("code",null,"-m"),i(" 传入信息（而不必打开代码编辑器）如示例可以使用命令 "),t("code",null,'$ git commit -m "Initial commit"')],-1),gn=t("p",null,"💡 提交 commit 原则是每个 commit 应该记录一项更改。一个 commit 不应包含不相关的更改，对于多项更改先进行一项更改，提交该更改，然后再进行第二项更改。如果一个更改有 bug，你需要撤消该更改时，则不用同时撤消另一个更改。",-1),hn=t("p",null,"💡 编写 Git Commit Message 建议",-1),pn=t("ul",null,[t("li",null,"消息篇幅简短（少于 60 个字符）"),t("li",null,[i("解释提交的作用（不是如何更改（这是命令 "),t("code",null,"git log -p"),i(" 的目的，通过展示具体的代码可知）或为何更改！）")]),t("li",null,[i("可以添加解释提交的原因。在代码编辑器中编写提交说明时，第一行是消息本身，"),t("strong",null,"消息之后空一行"),i("，然后输入正文或说明，包括关于为何需要该 commit 的原因详情（例如 URL 链接）。（而查看时如果使用了命令 "),t("code",null,"git log --oneline"),i(" 只能查看说明（第一行），应使用 "),t("code",null,"git log"),i(" 或 "),t("code",null,"git show"),i(" 以查看完整的说明正文）")]),t("li",null,[i("请勿使用单词 "),t("code",null,"and"),i("（如果你必须使用则说明这一次提交可能进行了太多的更改，将这些更改拆分为独立的 commit）")]),t("li",null,[i("在编写提交说明时保持一致性，可以使用短语句式 "),t("code",null,"This commit will…")])],-1),bn=t("p",null,"参考：",-1),fn=t("ul",null,[t("li",null,[t("a",{href:"https://chris.beams.io/posts/git-commit/",target:"_blank",rel:"noopener noreferrer"},"如何编写 Git Commit Message"),i("（"),t("a",{href:"https://www.jianshu.com/p/0117334c75fc",target:"_blank",rel:"noopener noreferrer"},"译文"),i(" ）")]),t("li",null,[t("a",{href:"http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html",target:"_blank",rel:"noopener noreferrer"},"Commit message 和 Change log 编写指南")])],-1),kn=t("h2",{id:"相关-commit-引用",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#相关-commit-引用","aria-hidden":"true"},"#"),i(" 相关 commit 引用")],-1),_n=t("p",null,[i("可以使用 SHA、标签、分支和 "),t("code",null,"HEAD"),i(" 指针引用 commit。有时候这些并不足够，可能需要引用相对于另一个 commit 的 commit。可以使用特殊的「祖先引用」字符来告诉 git 这些相对引用：")],-1),En=t("ul",null,[t("li",null,[t("code",null,"^"),i("表示父 commit")]),t("li",null,[t("code",null,"~"),i("表示第一个父 commit，该字符 "),t("code",null,"~"),i("（与 "),t("code",null,"^"),i(" 字符相比）作用主要体现在通过合并而创建的 commit 中。合并 commit 具有两个父级，"),t("code",null,"^"),i(" 引用表示第一个父 commit，即当你运行 "),t("code",null,"git merge"),i(" 时所处的分支；而 "),t("code",null,"^2"),i(" 表示第二个父 commit，即被合并的分支。")])],-1),An=t("p",null,"常用的 commit 相对引用：",-1),xn=t("ul",null,[t("li",null,[i("父 commit "),t("ul",null,[t("li",null,[t("code",null,"HEAD^")]),t("li",null,[t("code",null,"HEAD~")]),t("li",null,[t("code",null,"HEAD~1")])])]),t("li",null,[i("祖父 commit "),t("ul",null,[t("li",null,[t("code",null,"HEAD^^")]),t("li",null,[t("code",null,"HEAD~2")])])]),t("li",null,[i("曾祖父 commit "),t("ul",null,[t("li",null,[t("code",null,"HEAD^^^")]),t("li",null,[t("code",null,"HEAD~3")])])])],-1),wn=t("h2",{id:"撤销-commit",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#撤销-commit","aria-hidden":"true"},"#"),i(" 撤销 commit")],-1),Gn=t("p",null,"撤销 commit 可以将相应的提交从仓库中删除，但使用时需慎重。",-1),Bn=t("h3",{id:"修改最近一次-commit",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#修改最近一次-commit","aria-hidden":"true"},"#"),i(" 修改最近一次 commit")],-1),Hn=t("p",null,[i("命令 "),t("code",null,"git commit --amend"),i(" 更改最近的 commit。")],-1),Sn=t("ul",null,[t("li",null,[t("p",null,[i("修改 commit 信息：如果工作目录没有内容（也就是仓库中没有任何未 commit 的更改），运行命令 "),t("code",null,"git commit --amend"),i(" 代码编辑器将打开，并显示原始 commit 消息。此时可以纠正拼错的单词或提供重新表述，然后保存文件并关闭编辑器，以更新最近一次 commit 消息。")])]),t("li",null,[t("p",null,[i("增添修改：若提交中有纰漏，可以再次编辑文件，暂存文件，但在提交时使用命令 "),t("code",null,"git commit --amend"),i(" 以更新最近的 commit，而不是创建新的 commit（以避免针对完全相同的任务由于更新纰漏造成两次提交）")])])],-1),vn=t("h3",{id:"还原-commit",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#还原-commit","aria-hidden":"true"},"#"),i(" 还原 commit")],-1),Dn=t("p",null,"参考：",-1),yn=t("ul",null,[t("li",null,[t("a",{href:"https://git-scm.com/docs/git-revert",target:"_blank",rel:"noopener noreferrer"},"git-revert")]),t("li",null,[t("a",{href:"https://www.atlassian.com/git/tutorials/undoing-changes",target:"_blank",rel:"noopener noreferrer"},"git revert"),i(" 教程")])],-1),Cn=t("p",null,[i("还原 revert 是指 git 执行和 commit 中的更改"),t("strong",null,"完全相反的更改"),i("。命令 "),t("code",null,"git revert <SHA-of-commit-to-revert>"),i(" 撤销目标 commit 同时创建一个新的 commit 记录这次还原更改（提交信息推荐使用默认提供的 commit 消息）")],-1),jn=t("h3",{id:"重置-commit",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#重置-commit","aria-hidden":"true"},"#"),i(" 重置 commit")],-1),Fn=t("p",null,"参考：",-1),Mn=t("ul",null,[t("li",null,[t("a",{href:"https://git-scm.com/docs/git-reset",target:"_blank",rel:"noopener noreferrer"},"git-reset")]),t("li",null,[t("a",{href:"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E7%BD%AE%E6%8F%AD%E5%AF%86",target:"_blank",rel:"noopener noreferrer"},"Git 工具 - 重置揭密")]),t("li",null,[t("a",{href:"https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection#Ancestry-References",target:"_blank",rel:"noopener noreferrer"},"祖先引用"),i("（"),t("a",{href:"https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%80%89%E6%8B%A9%E4%BF%AE%E8%AE%A2%E7%89%88%E6%9C%AC",target:"_blank",rel:"noopener noreferrer"},"中译版"),i("）")])],-1),In=t("p",null,[i("⚠️ 重置 reset 会清除 commit！它所包含的内容也会消失，请谨慎使用。命令 "),t("code",null,"git rest <reference-to-commit>"),i(" 移动 "),t("code",null,"HEAD"),i(" 指针「回滚」到相对引用所对应的 commit，并清除当前分支该 commit 前方的所有提交，根据命令设置的选项对这些 commit 的更改「撤回」到相应的空间")],-1),$n=t("p",null,[t("img",{src:"/blog-code/assets/20191125232007335_276.776c7fd5.png",alt:"重置 commit"})],-1),zn=t("ul",null,[t("li",null,[i("命令设置选项 "),t("code",null,"--mixed"),i("（默认值）把移动后 "),t("code",null,"HEAD"),i(" 指针前的 commit 中做出的更改移至工作目录中")]),t("li",null,[i("命令设置选项 "),t("code",null,"--soft"),i(" 把移动后 "),t("code",null,"HEAD"),i(" 指针前的 commit 中做出的更改移至暂存区")]),t("li",null,[i("命令设置选项 "),t("code",null,"--hard"),i(" 更改被清除。")])],-1),Rn=t("p",null,[i("重置到父 commit 命令设置选项 "),t("code",null,"--mixed")],-1),Vn=t("p",null,[t("img",{src:"/blog-code/assets/20191125233006182_14015.18e917ba.png",alt:"重置 commit 且更改移至工作区"})],-1),Nn=t("ul",null,[t("li",null,[i("可以重置到 SHA 所对应的特定 commit 使用命令 "),t("code",null,"git reset <SHA>")]),t("li",null,[i("在执行 reset 操作前请 💡备份分支💡，通常会在最近的 commit 上创建一个 "),t("code",null,"backup"),i(" 分支，以便出现错误可以返回这些 commit")])],-1),Ln=t("div",{class:"language-bash ext-sh line-numbers-mode"},[t("pre",{class:"language-bash"},[t("code",null,[i("$ "),t("span",{class:"token function"},"git"),i(" branch backup\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br")])],-1),Tn=t("ul",null,[t("li",null,[t("p",null,[i("恢复原有 commit 只需要（先从工作目录中删除未 commit 的更改）将当前分支指向 "),t("code",null,"backup"),i(" 分支即可，会进行快进合并将 "),t("code",null,"backup"),i(" 合并到当前分支，把当前分支向上移动到和 "),t("code",null,"backup"),i(" 一样的点")]),t("p",null,[i("示例中使用 "),t("code",null,"git reset HEAD^"),i(" 将分支重置到 父 commit，撤回的更改即文件 "),t("code",null,"index.html"),i(" 移到工作区。要恢复分支所有 commit 需要先删除工作区的 "),t("code",null,"index.html"),i(" 文件")]),t("div",{class:"language-bash ext-sh line-numbers-mode"},[t("pre",{class:"language-bash"},[t("code",null,[i("$ "),t("span",{class:"token function"},"git"),i(" checkout -- index.html\n$ "),t("span",{class:"token function"},"git"),i(" merge backup\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br")])])]),t("li",null,[t("p",null,[i("git 会在完全清除任何内容之前，持续跟踪大约 30 天。使用命令 "),t("code",null,"git reflog"),i("可调用这些内容 。请参阅以下链接以了解详情")]),t("ul",null,[t("li",null,[t("a",{href:"https://git-scm.com/docs/git-reflog",target:"_blank",rel:"noopener noreferrer"},"git-reflog")]),t("li",null,[t("a",{href:"https://www.atlassian.com/git/tutorials/rewriting-history",target:"_blank",rel:"noopener noreferrer"},"重写历史记录")]),t("li",null,[t("a",{href:"http://gitready.com/intermediate/2009/02/09/reflog-your-safety-net.html",target:"_blank",rel:"noopener noreferrer"},"reflog，你的安全屏障")])])])],-1),Un=t("h2",{id:"压制-commit",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#压制-commit","aria-hidden":"true"},"#"),i(" 压制 commit")],-1),Wn=t("p",null,"参考：",-1),On=t("ul",null,[t("li",null,[t("a",{href:"https://git-scm.com/book/en/v2/Git-Branching-Rebasing",target:"_blank",rel:"noopener noreferrer"},"Git 分支 - 变基"),i("（"),t("a",{href:"https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA",target:"_blank",rel:"noopener noreferrer"},"中译版"),i("）")]),t("li",null,[t("a",{href:"https://git-scm.com/docs/git-rebase",target:"_blank",rel:"noopener noreferrer"},"git-rebase")]),t("li",null,[t("a",{href:"https://www.atlassian.com/git/tutorials/rewriting-history#git-rebase",target:"_blank",rel:"noopener noreferrer"},"Atlassian 博客")])],-1),Qn=t("p",null,[i("命令 "),t("code",null,"git rebase"),i(" 将多个 commit 压制 squash，即将多个 commit 合并成一个 commit。"),t("code",null,"git rebase"),i(" 也称为 "),t("strong",null,"变基"),i("，将 commit 移动到一个新基底 base 上，如命令 "),t("code",null,"git rebase -i HEAD~3"),i(" （选项 "),t("code",null,"-i"),i(" 代表 交互式 逐步操作，推荐使用）告诉 Git 使用 "),t("code",null,"HEAD~3"),i(" 作为其他所有 commit （"),t("code",null,"HEAD~2"),i("、"),t("code",null,"HEAD~1"),i(" 和 "),t("code",null,"HEAD"),i("）将连接到的基底。")],-1),Xn=t("p",null,[i("使用命令 "),t("code",null,"git rebase -i HEAD~3"),i(" 将最近三个 commit 压制为一个")],-1),qn=t("p",null,[i("🎦 "),t("a",{href:"https://www.jianguoyun.com/p/DeXt5i8QjNDGBxjL-uAD",target:"_blank",rel:"noopener noreferrer"},"压制 commit")],-1),Yn=t("ul",null,[t("li",null,[t("p",null,[i("在此操作中我必要进行"),t("strong",null,"强制推送"),i("分支。我不得不这样做，因为 GitHub 试图阻止我意外删除 commit。因为我使用了 "),t("code",null,"git rebase"),i(" 命令，实际上清除三个分别记录我添加了佛罗里达、巴黎和苏格兰的 commit。我使用 git rebase 将这些 commit 合并或压制为单个 commit，相当于创建一个具有新 SHA 的提交。当我尝试使用 "),t("code",null,"git push"),i(" 将此 commit 推送至 GitHub 时，GitHub 知道接受此推送会删除那三个单独 commit，所以它拒绝了（这实际上是对你的一种帮助，确保你已经审查过正在推送的 commit 和 GitHub 上的 commit，以验证你不会意外覆盖你在远程仓库上存储的内容！）。因此，我不得不使用 "),t("code",null,"git push -f"),i(" 强制推送这些 commit。")])]),t("li",null,[t("p",null,[i("命令 "),t("code",null,"git rebase"),i(" 根据选项不同可执行不同的命令")]),t("ul",null,[t("li",null,[i("设置选项 "),t("code",null,"p"),i(" 或 "),t("code",null,"pick"),i(" 表示 commit "),t("strong",null,"保持原样")]),t("li",null,[i("设置选项 "),t("code",null,"r"),i("或 "),t("code",null,"reword"),i(" 表示保留 commit 的内容，但修改 commit 说明")]),t("li",null,[i("设置选项 "),t("code",null,"e"),i(" 或 "),t("code",null,"edit"),i(" 表示保留 commit 的内容，但先不要执行 commit，以便： "),t("ul",null,[t("li",null,"添加新内容或文件"),t("li",null,"删除内容或文件"),t("li",null,"修改即将 commit 的内容")])]),t("li",null,[i("设置选项 "),t("code",null,"s"),i(" 或 "),t("code",null,"squash"),i(" 表示将此 commit 的更改"),t("strong",null,"结合"),i("到之前的 commit 中（列表中位于其上面的 commit ）")]),t("li",null,[i("设置选项 "),t("code",null,"f"),i(" 或 "),t("code",null,"fixup"),i(" 表示将此 commit 的更改结合到前一个 commit 中，但删除提交说明")]),t("li",null,[i("设置选项 "),t("code",null,"x"),i(" 或 "),t("code",null,"exec"),i(" 表示运行 shell 命令")]),t("li",null,[i("设置选项 "),t("code",null,"d"),i(" 或 "),t("code",null,"drop"),i(" 表示删除 commit")])])])],-1),Jn=t("p",null,[i("⚠️ "),t("code",null,"git rebase"),i(" 命令非常强大，可以帮助你编辑提交说明、重新排序 commit、合并 commit 等，但可能由于变基破环远程协作的流程。如果你在与其他开发者协作，那么他们可能已经在使用你推送的 commit。如果你随后使用 "),t("code",null,"git rebase"),i(" 来进行更改，并强行推送 commit，则其他开发者现在将无法与远程仓库同步。他们需要对自己的 Git 仓库进行一些复杂的手术，使它们的仓库回到工作状态……甚至可能连这一点都做不了；他们可能得抛弃之前的所有工作，使用你新变基过且强制推送的 commit 重新开始。"),t("strong",null,"因此如果你已推送了你想进行变基的 commit，则不应变基。")],-1),Kn=t("h2",{id:"查看更改",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#查看更改","aria-hidden":"true"},"#"),i(" 查看更改")],-1),Pn=t("p",null,[i("命令 "),t("code",null,"git diff"),i(" 查看当前工作区"),t("strong",null,"已加入 git 跟踪的文件，但是尚未提交的更改"),i("。实际上 "),t("code",null,"git log -p"),i(" 其实就是在后台使用了 "),t("code",null,"git diff"),i("。命令 "),t("code",null,"git diff"),i(" 输出工作区修改的具体信息：")],-1),Zn=t("ul",null,[t("li",null,"已经修改的文件"),t("li",null,"添加/删除的行所在的位置"),t("li",null,"执行的实际更改")],-1),le=t("p",null,[i("在 "),t("code",null,"index.html"),i(" 中重新组织标题的措辞，将标题从"),t("code",null,"Expedition"),i(" 改为 "),t("code",null,"Adventure")],-1),ne=t("p",null,[t("img",{src:"/blog-code/assets/20191124145801921_27239.b755a74d.png",alt:"查看文件具体更改"})],-1),ee=t("h2",{id:"忽略文件",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#忽略文件","aria-hidden":"true"},"#"),i(" 忽略文件")],-1),te=t("p",null,"参考：",-1),ie=t("ul",null,[t("li",null,[t("a",{href:"https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#Ignoring-Files",target:"_blank",rel:"noopener noreferrer"},"忽略文件"),i("|"),t("a",{href:"https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%AE%B0%E5%BD%95%E6%AF%8F%E6%AC%A1%E6%9B%B4%E6%96%B0%E5%88%B0%E4%BB%93%E5%BA%93",target:"_blank",rel:"noopener noreferrer"},"中")]),t("li",null,[t("a",{href:"https://git-scm.com/docs/gitignore#_pattern_format",target:"_blank",rel:"noopener noreferrer"},"gitignore 匹配模式"),i(" git 文档")]),t("li",null,[t("a",{href:"https://help.github.com/articles/ignoring-files/",target:"_blank",rel:"noopener noreferrer"},"忽略文件"),i(" GitHub 文档")]),t("li",null,[t("a",{href:"https://www.gitignore.io/",target:"_blank",rel:"noopener noreferrer"},"gitignore.io"),i("：提供了针对不同编程语言预设的 "),t("code",null,".gitignore"),i(" 文件下载")])],-1),oe=t("p",null,[i("文件 "),t("code",null,".gitignore"),i(" 用来告诉 git 不应跟踪的文件。如果想将某些文件保留在项目的目录结构中，但却不想提交到项目中进行跟踪，可以将这些文件记录在 "),t("code",null,".gitignore"),i("文件中")],-1),re=t("p",null,[i("在项目目录下新建了 "),t("code",null,"project.docx"),i(" 文件，但不需要进行跟踪.将该文件添加到 "),t("code",null,".gitignore"),i(" 文件中，并通过命令 "),t("code",null,"git status"),i(" 查看监测状态")],-1),ce=t("p",null,[t("img",{src:"/blog-code/assets/20191124155044992_28293.1fcf66f8.png",alt:"忽略文件"})],-1),ae=t("ul",null,[t("li",null,[t("code",null,".gitignore"),i(" 文件应该放在 "),t("code",null,".git"),i(" 目录所在的目录（一般是项目的根目录）")]),t("li",null,[i("由于在 Windows 系统中无法创建没有文件名的文件，推荐使用代码编辑器如 VS Code 创建 "),t("code",null,".gitignore")]),t("li",null,[i("使用"),t("strong",null,"通配符"),i("批量忽略文件名符合规则的文件。常见通配符如下 "),t("ul",null,[t("li",null,[t("code",null,"*"),i(" 字符匹配 0 个或多个字符")]),t("li",null,[t("code",null,"?"),i(" 字符匹配 1 个字符")]),t("li",null,[t("code",null,"[abc]"),i(" 与 "),t("code",null,"a"),i("、"),t("code",null,"b"),i(" 或 "),t("code",null,"c"),i(" 匹配")])])])],-1),ue=t("h2",{id:"标签",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#标签","aria-hidden":"true"},"#"),i(" 标签")],-1),se=t("p",null,"参考：",-1),de=t("ul",null,[t("li",null,[i("git 基础知识 - "),t("a",{href:"https://git-scm.com/book/en/v2/Git-Basics-Tagging",target:"_blank",rel:"noopener noreferrer"},"添加标签"),i("|"),t("a",{href:"https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE",target:"_blank",rel:"noopener noreferrer"},"中")]),t("li",null,[t("a",{href:"https://git-scm.com/docs/git-tag",target:"_blank",rel:"noopener noreferrer"},"git tag")])],-1),me=t("p",null,[i("命令 "),t("code",null,"git tag"),i(" 可对特定的 commit 进行标记，以更适合阅读和记忆的方式将该 commit 与其他提交区分出来。标签是关联相应 commit 的永久指针（与之相对的是分支指针 "),t("code",null,"<HEAD>"),i(" 随 commit 移动）。")],-1),ge=t("p",null,[t("img",{src:"/blog-code/assets/20191124170114997_8118.cf1afad2.png",alt:"添加标签"})],-1),he=t("ul",null,[t("li",null,[i("命令 "),t("code",null,"git tag <tag_name>"),i(" 为最近的 commit 添加轻量级标签，可以设置选项 "),t("code",null,"-a"),i(" 创建带注释的标签，提供更详细的信息，一般在标签注释中可以记录如下信息 "),t("ul",null,[t("li",null,"标签创建者"),t("li",null,"标签创建日期"),t("li",null,"标签消息")])]),t("li",null,[i("需要对特定（以前）commit 添加标签，可以在命令 "),t("code",null,"git tag"),i(" 最后设置 commit 相对应的 SHA，如 "),t("code",null,"$ git tag -a v1.0 a87984")])],-1),pe=t("h3",{id:"查询标签",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#查询标签","aria-hidden":"true"},"#"),i(" 查询标签")],-1),be=t("p",null,"查询标签有多种方法：",-1),fe=t("ul",null,[t("li",null,[i("命令 "),t("code",null,"git tag"),i(" 返回所有标签")]),t("li",null,[i("命令 "),t("code",null,"git log"),i("（在 2.13 版 git 中，"),t("code",null,"git log"),i(" 命令已改为自动启用 "),t("code",null,"--decorate"),i(" 选项） 或 "),t("code",null,"git log --decorate"),i(" 返回的标签与 SHA 位于同一行")])],-1),ke=t("p",null,[t("img",{src:"/blog-code/assets/20191124174723785_10228.cbdfcec8.png",alt:"多种方法查询标签"})],-1),_e=t("h3",{id:"删除标签",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#删除标签","aria-hidden":"true"},"#"),i(" 删除标签")],-1),Ee=t("p",null,[i("使用命令 "),t("code",null,"git tag -d <tag_name>"),i("（选项 "),t("code",null,"-d"),i(" 表示 delete 删除）删除指定的 git 标签 "),t("code",null,"<tag_name>")],-1),Ae=t("p",null,[t("img",{src:"/blog-code/assets/20191124174948372_32376.8f89da7a.png",alt:"删除标签"})],-1),xe=t("h2",{id:"分支",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#分支","aria-hidden":"true"},"#"),i(" 分支")],-1),we=t("p",null,"参考：",-1),Ge=t("ul",null,[t("li",null,[t("a",{href:"https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging",target:"_blank",rel:"noopener noreferrer"},"git 分支 - 分支的新建与合并"),i("("),t("a",{href:"https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6",target:"_blank",rel:"noopener noreferrer"},"中译版"),i("）")]),t("li",null,[t("a",{href:"http://learngitbranching.js.org/",target:"_blank",rel:"noopener noreferrer"},"了解 git 分支")]),t("li",null,[t("a",{href:"https://www.atlassian.com/git/tutorials/using-branches",target:"_blank",rel:"noopener noreferrer"},"git 分支教程")])],-1),Be=t("p",null,[i("分支是允许我们"),t("strong",null,"对同一个项目进行不同操作"),i("的隔离环境，分支常用来进行开发或对项目进行修正而不会影响到项目（因为更改是在分支上进行的）。")],-1),He=t("h3",{id:"创建分支",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#创建分支","aria-hidden":"true"},"#"),i(" 创建分支")],-1),Se=t("p",null,[i("git 默认分支为 "),t("code",null,"MASTER"),i("，可通过命令 "),t("code",null,"git branch new_branch"),i(" 创建新分支，且指向最新的 commit。当需要在以前的 commit 处创建分支，可以在命令最后设置相应 SHA 即 "),t("code",null,"git branch new_branch SHA_num")],-1),ve=t("p",null,[i("⚠️ 创建了新分支后，但是它还不是当前分支，需要使用命令 "),t("code",null,"git checkout branch_name"),i(" 切换到该分支。")],-1),De=t("p",null,[i("💡 使用切换分支命令同时添加选项 "),t("code",null,"-b"),i(" 可以实现"),t("strong",null,"创建并切换到新分支"),i(),t("code",null,"git checkout -b new_branch")],-1),ye=t("h3",{id:"查看分支",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#查看分支","aria-hidden":"true"},"#"),i(" 查看分支")],-1),Ce=t("p",null,[i("命令 "),t("code",null,"git branch"),i(" 列出仓库所有的分支名称时，活跃分支名称旁边会显示一个"),t("strong",null,"星号"),i("。此外Shell 提示符（括号中）也有显示活跃分支/当前分支。")],-1),je=t("p",null,[t("img",{src:"/blog-code/assets/20191124214539558_9509.cd27a3e2.png",alt:"活跃分支"})],-1),Fe=t("p",null,[i("使用命令 "),t("code",null,"git log"),i(" 或 "),t("code",null,"git log --decorate"),i(" 查看日志时也会显示分支，其中 "),t("code",null,"HEAD"),i(" 指向的是当前分支")],-1),Me=t("p",null,[t("img",{src:"/blog-code/assets/20191124215936614_2725.645779cc.png",alt:"日志中的分支"})],-1),Ie=t("p",null,[i("使用命令 "),t("code",null,"git log"),i(" 并设置选项 "),t("code",null,"--graph"),i(" 和 "),t("code",null,"--all"),i(" 可以显示仓库中所有分支和 commit，并在最左侧使用符号进行可视化")],-1),$e=t("p",null,[t("img",{src:"/blog-code/assets/20191125000547267_1280.9d9c653a.png",alt:"可视化所有分支和 commit"})],-1),ze=t("h3",{id:"切换分支",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#切换分支","aria-hidden":"true"},"#"),i(" 切换分支")],-1),Re=t("p",null,[i("命令 "),t("code",null,"git checkout branch_name"),i(" 将 "),t("code",null,"HEAD"),i(" 指针（"),t("code",null,"HEAD"),i(" 表示当前分支，即活跃分支）切换到指定分支上，在进行 commit 时，该 commit 将添加到当前分支上。")],-1),Ve=t("p",null,[i("💡 添加选项 "),t("code",null,"-b"),i(" 可以同时实现创建并切换到新分支 "),t("code",null,"git checkout -b new_branch")],-1),Ne=t("div",{class:"language-bash ext-sh line-numbers-mode"},[t("pre",{class:"language-bash"},[t("code",null,[i("$ "),t("span",{class:"token function"},"git"),i(" checkout -b footer master\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br")])],-1),Le=t("p",null,[i("创建新的 "),t("code",null,"footer"),i(" 分支并让此分支的"),t("strong",null,"起点位置"),i("与 "),t("code",null,"master"),i(" 分支的一样")],-1),Te=t("p",null,[i("⚠️ 执行该命令时会删除工作区中 git 所跟踪的所有文件和目录（因此应在切换分支前使用 "),t("code",null,"git status"),i(" 查看是否有未提交的修改，应先把更新的文件提交到仓库）由于当前分支 git 跟踪的文件已存储在仓库中，因此什么也不会丢失。然后转到另一分支时，git 会提取该分支指向的 commit 所对应的所有文件和目录到工作区。")],-1),Ue=t("p",null,[t("strong",null,"删除分支"),i(" 命令 "),t("code",null,"git branch -d branch_name"),i(" 删除特定的分支")],-1),We=t("ul",null,[t("li",null,"无法删除当前所在的分支，需要切换到 master 分支，或者创建并切换到新的分支再删除当前分支"),t("li",null,[i("如果某个分支上有任何其他分支上都没有包含的 commit（也就是这个 commit 是要被删除的分支独有的），git 不会删除该分支。"),t("strong",null,[i("要强制删除，你需要使用大写的 "),t("code",null,"D"),i(" 选项 "),t("code",null,"- git branch -D barnch_name")])])],-1),Oe=t("h3",{id:"合并分支",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#合并分支","aria-hidden":"true"},"#"),i(" 合并分支")],-1),Qe=t("p",null,"参考：",-1),Xe=t("ul",null,[t("li",null,[t("a",{href:"https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging#Basic-Merging",target:"_blank",rel:"noopener noreferrer"},"分支合并"),i("|"),t("a",{href:"https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6",target:"_blank",rel:"noopener noreferrer"},"中")]),t("li",null,[t("a",{href:"https://git-scm.com/docs/git-merge",target:"_blank",rel:"noopener noreferrer"},"git-merge")]),t("li",null,[t("a",{href:"https://www.atlassian.com/git/tutorials/git-merge",target:"_blank",rel:"noopener noreferrer"},"git 合并"),i(" Atlassian 博客")])],-1),qe=t("p",null,[i("主题分支的作用是可以做出不影响 master 分支的更改。在主题分支上做出更改后，如果觉得不想要该分支上的更改，则可以删掉该分支；若决定要保留更改，则可以将该分支上的更改与其他分支上的更改合并。将分支组合到一起称为合并，git 中有两种类型的合并，即"),t("strong",null,"普通合并"),i("和"),t("strong",null,"快进合并 fast forward"),i("，合并分支时会提交 commit 并添加到检出分支/当前分支上。")],-1),Ye=t("p",null,[i("命令 "),t("code",null,"git merge"),i(" 用来合并 git 分支")],-1),Je=t("div",{class:"language-bash ext-sh line-numbers-mode"},[t("pre",{class:"language-bash"},[t("code",null,[i("$ "),t("span",{class:"token function"},"git"),i(" merge "),t("span",{class:"token operator"},"<"),i("name-of-branch-to-merge-in"),t("span",{class:"token operator"},">"),i("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br")])],-1),Ke=t("p",null,"发生合并时 git 查看分支的历史记录，并寻找两个分支的 commit 历史记录中都有的单个 commit 进行覆盖，而单个分支上更改的代码行进行合并（合并指的是另一个分支上的更改将出现在当前检出的分支上，即合并是将其他分支合并到当前（检出的）分支上，不是将两个分支合并到一个新的分支上），提交一个 commit 并添加到检出分支/当前分支（另一分支不影响），以记录合并操作",-1),Pe=t("p",null,[i("🎦 "),t("a",{href:"https://www.jianguoyun.com/p/DfQmUG4QjNDGBxjN-uAD",target:"_blank",rel:"noopener noreferrer"},"合并")],-1),Ze=t("p",null,[i("如果在错误的分支上进行了合并，可使用命令 "),t("code",null,"git reset --hard HEAD^"),i("撤消合并（字符 "),t("code",null,"^"),i(" 表示相对 commit 引用，即父级 commit）")],-1),lt=t("h4",{id:"快进合并",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#快进合并","aria-hidden":"true"},"#"),i(" 快进合并")],-1),nt=t("p",null,"快进合并是将当前检出的分支向前移动，直到它指向与另一个分支（另一分支在 检出分支 前面）指向的 commit 一样为止。快进合并只需要将分支指针向前移动至另一分支（前方的）commit 即可",-1),et=t("p",null,[t("img",{src:"/blog-code/assets/20191125093413365_22843.c0062b13.png",alt:"快进合并"})],-1),tt=t("h4",{id:"普通合并",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#普通合并","aria-hidden":"true"},"#"),i(" 普通合并")],-1),it=t("p",null,"普通合并是两个完全不一样的分支进行合并。在进行 commit 时，需要提供 commit 消息，代码编辑器打开时 git 已经提供了默认消息（也可以更改消息，但通常都会直接使用默认的合并 commit 消息），可直接关闭编辑器以确认使用该 commit 消息。",-1),ot=t("p",null,[t("img",{src:"/blog-code/assets/20191125094019574_16234.48da0e70.png",alt:"普通合并"})],-1),rt=t("h4",{id:"合并冲突",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#合并冲突","aria-hidden":"true"},"#"),i(" 合并冲突")],-1),ct=t("p",null,"参考：",-1),at=t("ul",null,[t("li",null,[t("a",{href:"https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging#Basic-Merge-Conflicts",target:"_blank",rel:"noopener noreferrer"},"遇到冲突时的分支合并"),i("（"),t("a",{href:"https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6",target:"_blank",rel:"noopener noreferrer"},"中译版"),i("）")]),t("li",null,[t("a",{href:"https://git-scm.com/docs/git-merge#_how_conflicts_are_presented",target:"_blank",rel:"noopener noreferrer"},"冲突如何被显示")])],-1),ut=t("p",null,"大部分情况下 git 将能够成功地合并分支，但相同的行在要合并的不同分支上做出了更改时，就会出现合并冲突。如果出现合并冲突，git 将在合并途中暂停并告诉你存在冲突。要解决文件中的冲突：",-1),st=t("ul",null,[t("li",null,[i("打开代码编辑器，找到合并冲突指示符所标注的行（一个文件可能在多个部分存在合并冲突，因此检查整个文件中的合并冲突指示符可搜索 "),t("code",null,"<<<"),i(" 以查找到所有指示符）")]),t("li",null,"决定保留哪些行，并删掉不需要的行（包括冲突指示符）"),t("li",null,"保存文件"),t("li",null,"暂存文件"),t("li",null,"提交 commit（推荐使用自动生成的合并 commit 消息）")],-1),dt=t("p",null,[t("img",{src:"/blog-code/assets/20191125160452047_12583.d4044b99.png",alt:"合并冲突"})],-1),mt=t("p",null,[i("git 尝试合并在两个分支上都更改了的文件 "),t("code",null,"index.html"),i("，但是出现冲突。提示 "),t("code",null,'"Automatic merge failed; fix conflicts and then commit the result"'),i(" 对冲突文件进行处理后再提交。也可以使用命令 "),t("code",null,"git status"),i(" 查询冲突信息。")],-1),gt=t("p",null,[t("img",{src:"/blog-code/assets/20191125160732615_14810.0dadf91d.png",alt:"合并冲突指示符"})],-1),ht=t("p",null,"使用代码编辑器查看冲突文件，其中具有多种合并冲突指示符",-1),pt=t("ul",null,[t("li",null,[t("code",null,"<<<<<<< HEAD"),i(" 此行下方的所有内容（直到下个指示符）显示了当前分支上的行")]),t("li",null,[t("code",null,"||||||| merged common ancestors"),i(" 此行下方的所有内容（直到下个指示符）显示了"),t("strong",null,"原始行的内容"),i("（即检出分支和合并的另一分支共有 commit （较前）中的版本）")]),t("li",null,[t("code",null,"======="),i(" 表示原始行内容的结束位置，之后的所有行（直到下个指示符）是被合并的当前分支上的行的内容")]),t("li",null,[t("code",null,">>>>>>> heading-update"),i(" 是要被合并的分支（此例中是 "),t("code",null,"heading-update"),i(" 分支）上的行结束指示符")])],-1),bt=t("p",null,[t("img",{src:"/blog-code/assets/20191125161309425_29506.82f0fc9e.gif",alt:"处理冲突"})],-1),ft=t("p",null,"选择保留哪个标题（版本）后，删掉不需要的版本和所有包含合并冲突指示符的行，并保存文件。添加到暂存区，然后 commit（提交信息推荐用自动生成的合并 commit 消息）",-1);o.render=function(t,i){return l(),n(e,null,[r,c,a,u,s,d,m,g,h,p,b,f,k,_,E,A,x,w,G,B,H,S,v,D,y,C,j,F,M,I,$,z,R,V,N,L,T,U,W,O,Q,X,q,Y,J,K,P,Z,ll,nl,el,tl,il,ol,rl,cl,al,ul,sl,dl,ml,gl,hl,pl,bl,fl,kl,_l,El,Al,xl,wl,Gl,Bl,Hl,Sl,vl,Dl,yl,Cl,jl,Fl,Ml,Il,$l,zl,Rl,Vl,Nl,Ll,Tl,Ul,Wl,Ol,Ql,Xl,ql,Yl,Jl,Kl,Pl,Zl,ln,nn,en,tn,on,rn,cn,an,un,sn,dn,mn,gn,hn,pn,bn,fn,kn,_n,En,An,xn,wn,Gn,Bn,Hn,Sn,vn,Dn,yn,Cn,jn,Fn,Mn,In,$n,zn,Rn,Vn,Nn,Ln,Tn,Un,Wn,On,Qn,Xn,qn,Yn,Jn,Kn,Pn,Zn,le,ne,ee,te,ie,oe,re,ce,ae,ue,se,de,me,ge,he,pe,be,fe,ke,_e,Ee,Ae,xe,we,Ge,Be,He,Se,ve,De,ye,Ce,je,Fe,Me,Ie,$e,ze,Re,Ve,Ne,Le,Te,Ue,We,Oe,Qe,Xe,qe,Ye,Je,Ke,Pe,Ze,lt,nt,et,tt,it,ot,rt,ct,at,ut,st,dt,mt,gt,ht,pt,bt,ft],64)};export default o;
