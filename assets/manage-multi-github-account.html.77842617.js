import{d as e}from"./app.93fa4a4f.js";const n={},s=e('<h1 id="管理多个-github-账号" tabindex="-1"><a class="header-anchor" href="#管理多个-github-账号" aria-hidden="true">#</a> 管理多个 Github 账号</h1><p>在本地有很多项目与不同的 Gihub 账号的远程仓库连接，需要找到一个方便管理多个 Github 账号的方法。Github 提供两种命令行方式 Clone Code：</p><ul><li>HTTPS：使用 url 直接克隆到本地，但每次 fetch 和 push 代码都需要输入账号和密码</li><li>SSH：使用前需要在 Github 和本地配置好 SSH key，（如果生成 SSH key 时没有输入密码 passphrase）则克隆或者 fetch 和 push 代码时都不需要输入账号和密码</li></ul><p>方便起见使用 SSH 来管理多个 Github 账号。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><ul><li><a href="https://summertreee.github.io/blog/2017/10/16/yi-tai-dian-nao-she-zhi-duo-ge-githubzhang-hao/" target="_blank" rel="noopener noreferrer">一台电脑设置多个github账号</a></li><li><a href="https://blog.csdn.net/littleRpl/article/details/109801707" target="_blank" rel="noopener noreferrer">ssh密钥配置多个github账号</a></li><li>Github 官方文档 <a href="https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh" target="_blank" rel="noopener noreferrer">使用 SSH 连接到 GitHub</a> 一节</li></ul><h2 id="本地-多个-git-用户设置" tabindex="-1"><a class="header-anchor" href="#本地-多个-git-用户设置" aria-hidden="true">#</a> （本地）多个 Git 用户设置</h2><p>Git 用户信息 <code>user.name</code> 和 <code>user.email</code> 可以方便地识别和追踪项目的各部分的代码是哪一个开发者编写的，Git 支持设置全局的用户信息：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 设置全局用户信息</span>\n$ <span class="token function">git</span> config --global user.name <span class="token string">&quot;your name&quot;</span>\n$ <span class="token function">git</span> config --global user.email <span class="token string">&quot;your email&quot;</span>\n\n<span class="token comment"># 查看全局的用户信息</span>\n$ <span class="token function">git</span> config --global user.name\n$ <span class="token function">git</span> config --global user.email\n\n<span class="token comment"># 重置（取消）全局用户信息</span>\n$ <span class="token function">git</span> config --global --unset user.name\n$ <span class="token function">git</span> config --global --unset user.email\n\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>如果在不同的项目里使用不同的用户信息，可以设置本地用户信息，即以上语句不使用 <code>--global</code> 参数</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 在特定的项目路径下进行设置</span>\n$ <span class="token function">git</span> config user.name <span class="token string">&quot;your name&quot;</span>\n$ <span class="token function">git</span> config user.email <span class="token string">&quot;your email&quot;</span>\n\n<span class="token comment"># 查看当前项目的用户信息</span>\n$ <span class="token function">git</span> config user.name\n$ <span class="token function">git</span> config user.email\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="配置-ssh" tabindex="-1"><a class="header-anchor" href="#配置-ssh" aria-hidden="true">#</a> 配置 SSH</h2><p>为方便起见使用 SSH 将本地项目与远程的 Github 仓库连接，并进行配置方便管理多个使用不同 Github 账号的项目。</p><p>一个 SSH 的 public key 只能添加到一个 Github 账号上，因此如果需要在本机通过 SSH 连接多个 Github 账号，需要生成多个 SSH key，</p><ul><li><p>生成的 SSH keys 在 Windows 系统盘的 <code>C:\\Users\\yourUsername\\.ssh</code> 目录下，其中添加到 Github 的公钥是以 <code>.pub</code> 为后缀的文件</p></li><li><p>在 Git Bash 输入以下命令可以查看已存在 SSH</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">ls</span> -al ~/.ssh\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>在 Git Bash 输入以下命令生成新的 SSH 密钥，其中命令中 <code>your_email@example.com</code> 替换为所需的邮件和 <code>keyName</code> 替换为所需的文件名</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ ssh-keygen -t ed25519 -C <span class="token string">&quot;your_email@example.com&quot;</span> -f -ssh/id_rsa_keyName\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>这将创建以所提供的电子邮件地址为标签的新 SSH 密钥</li><li>生成名为 <code>id_rsa_keyName</code> 私钥，和名为 <code>id_rsa_keyName.pub</code> 公钥两个文件</li><li>生成密钥过程中会提示让你输入安全密码： <code>Enter passphrase(empty for no passphrase)</code> 如果为空，则以后使用密钥的时候就不会重复要求输入安全密码</li></ul></li><li><p>将 SSH 密钥添加到 ssh-agent</p><ul><li>确保 ssh-agent 正在运行 <code>eval &quot;$(ssh-agent -s)&quot;</code></li><li>将上一步创建的 SSH 私钥添加到 ssh-agent <code>$ ssh-add ~/.ssh/id_ed25519</code></li></ul></li><li><p><a href="https://docs.github.com/cn/github/authenticating-to-github/adding-a-new-ssh-key-to-your-github-account" target="_blank" rel="noopener noreferrer">将公钥添加到需要连接的 Github 账户上</a></p></li><li><p>配置 ssh</p><ul><li><p>如果在 Windows 系统盘的 <code>C:\\Users\\yourUsername\\.ssh</code> 目录下没有配置文件 <code>config</code> 可以手动创建</p></li><li><p>在 ``~/.ssh/config` 文件中按照以下模板为「多个 Github 账户」设置不同的 SSH key ，以下例子配置了两个 ssh key</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>#github default 默认使用\nHost github.com #这里名称可以随意取，和下面的不一样就行，这是识别的关键\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_rsa #使用的相应私钥\n    IdentitiesOnly yes\n\n#github collection\nHost collection.github.com #这里名称可以随意取\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_rsa_collection\n    IdentitiesOnly yes\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul></li></ul><h3 id="克隆远程仓库" tabindex="-1"><a class="header-anchor" href="#克隆远程仓库" aria-hidden="true">#</a> 克隆远程仓库</h3><p>将远程仓库使用 SSH 克隆到本地，根据以上的 SSH 配置，需要使用不同的方式：</p><ul><li><p>如果是使用默认的 SSH key 可以直接使用 Gihub 提供的 SSH url 来克隆，即使用 Host <code>github.com</code>，克隆命令遵循格式为 <code>git clone git@github.com:账户名/仓库.git</code>。</p></li><li><p>如果希望使用 collection 对应的 SSH key，则克隆仓库时需要使用设定的 Host <code>collection.github.com</code>，即克隆命令遵循格式为 <code>git clone git@collection.github.com:账户名/仓库.git</code></p></li></ul><h3 id="连接远程仓库" tabindex="-1"><a class="header-anchor" href="#连接远程仓库" aria-hidden="true">#</a> 连接远程仓库</h3><p>如果是将本地已存在的项目与远程仓库连接，根据以上的 SSH 配置，类似地需要使用不同的方式：</p><ul><li>如果是使用默认的 SSH key，则直接将 Github 提供的 SSH url 作为远端仓库的地址，即为本地项目绑定远程仓库的命令遵循格式为 <code>git remote add origin git@github.com:账户名/仓库.git</code></li><li>如果希望使用 collection 对应的 SSH key，则绑定远程仓库的命令遵循格式为 <code>git remote add origin git@collection.github.com:账户名/仓库.git</code></li></ul><p>💡 查看本地项目已连接的远程仓库 <code>git remote -v</code></p><p>💡 如果本地项目已经与远程仓库绑定了，需要先「解绑」<code>git remote remove origin</code> （其中 <code>origin</code> 是远程仓库的名称，默认值一般为 <code>origin</code>，可以查看已绑定的远程仓库信息确认一下），才可以重新连接新的远程仓库</p><p>💡 重新绑定远程仓库后，第一次推动代码需要设定上游分支 <code>git push -u origin master</code> 该命令表示推送代码时将远程仓库 origin 的分支 <code>master</code> 作为上游分支</p>',24);n.render=function(e,n){return s};export default n;
