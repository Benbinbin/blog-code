import{o as n,c as s,F as a,a as e,b as t}from"./app.93fa4a4f.js";var l="/blog-code/assets/20200811110502673_30601.7d062c0a.gif";const c={},o=e("h1",{id:"二叉树遍历",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二叉树遍历","aria-hidden":"true"},"#"),t(" 二叉树遍历")],-1),p=e("p",null,"以一定的顺序规则，逐个访问二叉树的所有结点，这个过程就是二叉树的遍历。",-1),u=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token comment"},"// 构造二叉树"),t("\n"),e("span",{class:"token keyword"},"function"),t(),e("span",{class:"token function"},"TreeNode"),e("span",{class:"token punctuation"},"("),e("span",{class:"token parameter"},"val"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t("\n    "),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),t("val "),e("span",{class:"token operator"},"="),t(" val"),e("span",{class:"token punctuation"},";"),t("\n    "),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),t("left "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),t("right "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token keyword"},"null"),e("span",{class:"token punctuation"},";"),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n\n"),e("span",{class:"token comment"},"// root"),t("\n"),e("span",{class:"token keyword"},"const"),t(" root "),e("span",{class:"token operator"},"="),t("  "),e("span",{class:"token keyword"},"new"),t(),e("span",{class:"token class-name"},"TreeNode"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'A'"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n\n"),e("span",{class:"token comment"},"// left node"),t("\n"),e("span",{class:"token keyword"},"const"),t(" leftNode "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token keyword"},"new"),t(),e("span",{class:"token class-name"},"TreeNode"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'B'"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\nroot"),e("span",{class:"token punctuation"},"."),t("left "),e("span",{class:"token operator"},"="),t(" leftNode"),e("span",{class:"token punctuation"},";"),t("\nleftNode"),e("span",{class:"token punctuation"},"."),t("left "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token keyword"},"new"),t(),e("span",{class:"token class-name"},"TreeNode"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'D'"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\nleftNode"),e("span",{class:"token punctuation"},"."),t("right "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token keyword"},"new"),t(),e("span",{class:"token class-name"},"TreeNode"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'E'"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n\n"),e("span",{class:"token comment"},"// right node"),t("\n"),e("span",{class:"token keyword"},"const"),t(" rightNode "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token keyword"},"new"),t(),e("span",{class:"token class-name"},"TreeNode"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'C'"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\nroot"),e("span",{class:"token punctuation"},"."),t("right "),e("span",{class:"token operator"},"="),t(" rightNode"),e("span",{class:"token punctuation"},";"),t("\nrightNode"),e("span",{class:"token punctuation"},"."),t("right "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token keyword"},"new"),t(),e("span",{class:"token class-name"},"TreeNode"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'F'"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n\n"),e("span",{class:"token comment"},"// 二叉树数据结构"),t("\n"),e("span",{class:"token comment"},"// root = {"),t("\n"),e("span",{class:"token comment"},'//   val: "A",'),t("\n"),e("span",{class:"token comment"},"//   left: {"),t("\n"),e("span",{class:"token comment"},'//     val: "B",'),t("\n"),e("span",{class:"token comment"},"//     left: {"),t("\n"),e("span",{class:"token comment"},'//       val: "D"'),t("\n"),e("span",{class:"token comment"},"//     },"),t("\n"),e("span",{class:"token comment"},"//     right: {"),t("\n"),e("span",{class:"token comment"},'//       val: "E"'),t("\n"),e("span",{class:"token comment"},"//     }"),t("\n"),e("span",{class:"token comment"},"//   },"),t("\n"),e("span",{class:"token comment"},"//   right: {"),t("\n"),e("span",{class:"token comment"},'//     val: "C",'),t("\n"),e("span",{class:"token comment"},"//     right: {"),t("\n"),e("span",{class:"token comment"},'//       val: "F"'),t("\n"),e("span",{class:"token comment"},"//     }"),t("\n"),e("span",{class:"token comment"},"//   }"),t("\n"),e("span",{class:"token comment"},"// };"),t("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br"),e("span",{class:"line-number"},"10"),e("br"),e("span",{class:"line-number"},"11"),e("br"),e("span",{class:"line-number"},"12"),e("br"),e("span",{class:"line-number"},"13"),e("br"),e("span",{class:"line-number"},"14"),e("br"),e("span",{class:"line-number"},"15"),e("br"),e("span",{class:"line-number"},"16"),e("br"),e("span",{class:"line-number"},"17"),e("br"),e("span",{class:"line-number"},"18"),e("br"),e("span",{class:"line-number"},"19"),e("br"),e("span",{class:"line-number"},"20"),e("br"),e("span",{class:"line-number"},"21"),e("br"),e("span",{class:"line-number"},"22"),e("br"),e("span",{class:"line-number"},"23"),e("br"),e("span",{class:"line-number"},"24"),e("br"),e("span",{class:"line-number"},"25"),e("br"),e("span",{class:"line-number"},"26"),e("br"),e("span",{class:"line-number"},"27"),e("br"),e("span",{class:"line-number"},"28"),e("br"),e("span",{class:"line-number"},"29"),e("br"),e("span",{class:"line-number"},"30"),e("br"),e("span",{class:"line-number"},"31"),e("br"),e("span",{class:"line-number"},"32"),e("br"),e("span",{class:"line-number"},"33"),e("br"),e("span",{class:"line-number"},"34"),e("br"),e("span",{class:"line-number"},"35"),e("br"),e("span",{class:"line-number"},"36"),e("br"),e("span",{class:"line-number"},"37"),e("br"),e("span",{class:"line-number"},"38"),e("br"),e("span",{class:"line-number"},"39"),e("br")])],-1),r=e("p",null,"由于二叉树都是由三部分组成的：根节点、左子树、右子树。而且左右子树都是二叉树，因此可以将子树也「分解」看作由这个基本结构组成的。因此对树的遍历，就可以看做是对这三个部分的遍历。",-1),i=e("p",null,[e("img",{src:"/blog-code/assets/20200811110421978_1692.1920ae56.png",alt:"structure of binary tree"})],-1),k=e("p",null,"按照实现方式的不同，遍历方式又可以分为以下两种：",-1),m=e("ul",null,[e("li",null,[e("strong",null,"递归遍历"),t("：基于根结点的遍历分别被安排在了首要位置、中间位置和最后位置（根结点的遍历的时机），可以将递归遍历方法分为先序遍历、中序遍历、后序遍历 "),e("ul",null,[e("li",null,[e("strong",null,"先序遍历"),t("：根结点 -> 左子树 -> 右子树")]),e("li",null,[e("strong",null,"中序遍历"),t("：左子树 -> 根结点 -> 右子树")]),e("li",null,[e("strong",null,"后序遍历"),t("：左子树 -> 右子树 -> 根结点")])])]),e("li",null,[e("strong",null,"迭代遍历"),t("：层次遍历")])],-1),b=e("h2",{id:"递归遍历",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#递归遍历","aria-hidden":"true"},"#"),t(" 递归遍历")],-1),d=e("p",null,[t("💡 编程语言中，函数"),e("strong",null,"直接或间接调用函数本身"),t("，则该函数称为递归函数。")],-1),g=e("h3",{id:"先序遍历",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#先序遍历","aria-hidden":"true"},"#"),t(" 先序遍历")],-1),f=e("p",null,[e("img",{src:"/blog-code/assets/20200811110445154_24920.4d347ff7.png",alt:"先序遍历规则"})],-1),h=e("p",null,[e("img",{src:l,alt:"先序遍历过程演示"})],-1),w=e("ul",null,[e("li",null,[t("先序遍历的"),e("strong",null,"递归式"),t("：每一次重复的内容是 "),e("code",null,"根结点 -> 左子树 -> 右子树")]),e("li",null,[t("先序遍历的"),e("strong",null,"递归边界"),t("：当我们发现遍历的目标树为空的时候，停止递归调用")])],-1),y=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token comment"},"// 先序遍历函数"),t("\n"),e("span",{class:"token comment"},"// 入参是树的根结点对象"),t("\nfunciton "),e("span",{class:"token function"},"preorder"),e("span",{class:"token punctuation"},"("),e("span",{class:"token parameter"},"root"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t("\n    "),e("span",{class:"token keyword"},"if"),e("span",{class:"token punctuation"},"("),t("root"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t("\n        "),e("span",{class:"token comment"},"// 输出当前遍历的结点值"),t("\n        console"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"log"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'当前遍历的结点值是：'"),e("span",{class:"token punctuation"},","),t(" root"),e("span",{class:"token punctuation"},"."),t("val"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n        "),e("span",{class:"token comment"},"// 递归遍历左子树"),t("\n        "),e("span",{class:"token function"},"preorder"),e("span",{class:"token punctuation"},"("),t("root"),e("span",{class:"token punctuation"},"."),t("left"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n        "),e("span",{class:"token comment"},"// 递归遍历右子树"),t("\n        "),e("span",{class:"token function"},"preorder"),e("span",{class:"token punctuation"},"("),t("root"),e("span",{class:"token punctuation"},"."),t("right"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n    "),e("span",{class:"token punctuation"},"}"),t(),e("span",{class:"token keyword"},"else"),t(),e("span",{class:"token punctuation"},"{"),t("\n        "),e("span",{class:"token comment"},"// 递归边界，当结点为空时返回"),t("\n        "),e("span",{class:"token keyword"},"return"),t("\n    "),e("span",{class:"token punctuation"},"}"),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n\n"),e("span",{class:"token comment"},"// 运行结果"),t("\n"),e("span",{class:"token function"},"preorder"),e("span",{class:"token punctuation"},"("),t("root"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n\n"),e("span",{class:"token comment"},"// 当前遍历的结点值是： A"),t("\n"),e("span",{class:"token comment"},"// 当前遍历的结点值是： B"),t("\n"),e("span",{class:"token comment"},"// 当前遍历的结点值是： D"),t("\n"),e("span",{class:"token comment"},"// 当前遍历的结点值是： E"),t("\n"),e("span",{class:"token comment"},"// 当前遍历的结点值是： C"),t("\n"),e("span",{class:"token comment"},"// 当前遍历的结点值是： F"),t("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br"),e("span",{class:"line-number"},"10"),e("br"),e("span",{class:"line-number"},"11"),e("br"),e("span",{class:"line-number"},"12"),e("br"),e("span",{class:"line-number"},"13"),e("br"),e("span",{class:"line-number"},"14"),e("br"),e("span",{class:"line-number"},"15"),e("br"),e("span",{class:"line-number"},"16"),e("br"),e("span",{class:"line-number"},"17"),e("br"),e("span",{class:"line-number"},"18"),e("br"),e("span",{class:"line-number"},"19"),e("br"),e("span",{class:"line-number"},"20"),e("br"),e("span",{class:"line-number"},"21"),e("br"),e("span",{class:"line-number"},"22"),e("br"),e("span",{class:"line-number"},"23"),e("br"),e("span",{class:"line-number"},"24"),e("br"),e("span",{class:"line-number"},"25"),e("br")])],-1),v=e("h3",{id:"中序遍历",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#中序遍历","aria-hidden":"true"},"#"),t(" 中序遍历")],-1),x=e("p",null,[e("img",{src:"/blog-code/assets/20200811113137553_31671.3092cee8.png",alt:"中序遍历规则"})],-1),j=e("p",null,[e("img",{src:"/blog-code/assets/20200811113220124_11552.3895153e.gif",alt:"中序遍历过程演示"})],-1),N=e("ul",null,[e("li",null,[t("中序遍历的"),e("strong",null,"递归式"),t("：每一次重复的内容是 "),e("code",null,"左子树 -> 根结点 -> 右子树")]),e("li",null,[t("中序遍历的"),e("strong",null,"递归边界"),t("：当我们发现遍历的目标树为空的时候，停止递归调用")])],-1),T=e("p",null,[t("💡 与先序遍历的唯一发生改变的是递归式里调用递归函数的顺序，"),e("strong",null,"左子树的访问会优先于根结点")],-1),O=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token comment"},"// 中序遍历函数"),t("\n"),e("span",{class:"token comment"},"// 入参是树的根结点对象"),t("\n"),e("span",{class:"token keyword"},"function"),t(),e("span",{class:"token function"},"inOrder"),e("span",{class:"token punctuation"},"("),e("span",{class:"token parameter"},"root"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t("\n  "),e("span",{class:"token keyword"},"if"),t(),e("span",{class:"token punctuation"},"("),t("root"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t("\n    "),e("span",{class:"token comment"},"// 递归遍历左子树"),t("\n    "),e("span",{class:"token function"},"inOrder"),e("span",{class:"token punctuation"},"("),t("root"),e("span",{class:"token punctuation"},"."),t("left"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n    "),e("span",{class:"token comment"},"// 输出当前遍历的结点值"),t("\n    console"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"log"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'当前遍历的结点值是：'"),e("span",{class:"token punctuation"},","),t(" root"),e("span",{class:"token punctuation"},"."),t("val"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n    "),e("span",{class:"token comment"},"// 递归遍历右子树"),t("\n    "),e("span",{class:"token function"},"inOrder"),e("span",{class:"token punctuation"},"("),t("root"),e("span",{class:"token punctuation"},"."),t("right"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n  "),e("span",{class:"token punctuation"},"}"),t(),e("span",{class:"token keyword"},"else"),t(),e("span",{class:"token punctuation"},"{"),t("\n    "),e("span",{class:"token comment"},"// 递归边界，当结点为空时返回"),t("\n    "),e("span",{class:"token keyword"},"return"),t("\n  "),e("span",{class:"token punctuation"},"}"),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n\n"),e("span",{class:"token comment"},"// 运行结果"),t("\n"),e("span",{class:"token function"},"inOrder"),e("span",{class:"token punctuation"},"("),t("root"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n\n"),e("span",{class:"token comment"},"// 当前遍历的结点值是： D"),t("\n"),e("span",{class:"token comment"},"// 当前遍历的结点值是： B"),t("\n"),e("span",{class:"token comment"},"// 当前遍历的结点值是： E"),t("\n"),e("span",{class:"token comment"},"// 当前遍历的结点值是： A"),t("\n"),e("span",{class:"token comment"},"// 当前遍历的结点值是： C"),t("\n"),e("span",{class:"token comment"},"// 当前遍历的结点值是： F"),t("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br"),e("span",{class:"line-number"},"10"),e("br"),e("span",{class:"line-number"},"11"),e("br"),e("span",{class:"line-number"},"12"),e("br"),e("span",{class:"line-number"},"13"),e("br"),e("span",{class:"line-number"},"14"),e("br"),e("span",{class:"line-number"},"15"),e("br"),e("span",{class:"line-number"},"16"),e("br"),e("span",{class:"line-number"},"17"),e("br"),e("span",{class:"line-number"},"18"),e("br"),e("span",{class:"line-number"},"19"),e("br"),e("span",{class:"line-number"},"20"),e("br"),e("span",{class:"line-number"},"21"),e("br"),e("span",{class:"line-number"},"22"),e("br"),e("span",{class:"line-number"},"23"),e("br"),e("span",{class:"line-number"},"24"),e("br"),e("span",{class:"line-number"},"25"),e("br")])],-1),_=e("h3",{id:"后序遍历",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#后序遍历","aria-hidden":"true"},"#"),t(" 后序遍历")],-1),F=e("p",null,[e("img",{src:"/blog-code/assets/20200811114346262_26747.ff480a8d.png",alt:"后序遍历规则"})],-1),A=e("p",null,[e("img",{src:"/blog-code/assets/20200811114430679_27482.025f5527.gif",alt:"后续遍历过程演示"})],-1),B=e("ul",null,[e("li",null,[t("后序遍历的"),e("strong",null,"递归式"),t("：每一次重复的内容是 "),e("code",null,"左子树 -> 右子树 -> 根结点")]),e("li",null,[t("后序遍历的"),e("strong",null,"递归边界"),t("：当我们发现遍历的目标树为空的时候，停止递归调用")])],-1),C=e("p",null,[t("💡 与先序遍历的唯一发生改变的是递归式里调用递归函数的顺序，"),e("strong",null,"左子树和右子树的访问会优先于根结点")],-1),D=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token comment"},"// 后序遍历函数"),t("\n"),e("span",{class:"token comment"},"// 入参是树的根结点对象"),t("\n"),e("span",{class:"token keyword"},"function"),t(),e("span",{class:"token function"},"postOrder"),e("span",{class:"token punctuation"},"("),e("span",{class:"token parameter"},"root"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t("\n    "),e("span",{class:"token keyword"},"if"),e("span",{class:"token punctuation"},"("),t("root"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t("\n        "),e("span",{class:"token comment"},"// 递归遍历左子树"),t("\n        "),e("span",{class:"token function"},"postOrder"),e("span",{class:"token punctuation"},"("),t("root"),e("span",{class:"token punctuation"},"."),t("left"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n        "),e("span",{class:"token comment"},"// 递归遍历右子树"),t("\n        "),e("span",{class:"token function"},"postOrder"),e("span",{class:"token punctuation"},"("),t("root"),e("span",{class:"token punctuation"},"."),t("right"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n        "),e("span",{class:"token comment"},"// 输出当前遍历的结点值"),t("\n        console"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"log"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'当前遍历的结点值是：'"),e("span",{class:"token punctuation"},","),t(" root"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n    "),e("span",{class:"token punctuation"},"}"),t(),e("span",{class:"token keyword"},"else"),t(),e("span",{class:"token punctuation"},"{"),t("\n        "),e("span",{class:"token comment"},"// 递归边界，当结点为空时返回"),t("\n        "),e("span",{class:"token keyword"},"return"),t("\n    "),e("span",{class:"token punctuation"},"}"),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n\n"),e("span",{class:"token comment"},"// 运行结果"),t("\n"),e("span",{class:"token function"},"postOrder"),e("span",{class:"token punctuation"},"("),t("root"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n\n"),e("span",{class:"token comment"},"// 当前遍历的结点值是： D"),t("\n"),e("span",{class:"token comment"},"// 当前遍历的结点值是： E"),t("\n"),e("span",{class:"token comment"},"// 当前遍历的结点值是： B"),t("\n"),e("span",{class:"token comment"},"// 当前遍历的结点值是： F"),t("\n"),e("span",{class:"token comment"},"// 当前遍历的结点值是： C"),t("\n"),e("span",{class:"token comment"},"// 当前遍历的结点值是： A"),t("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br"),e("span",{class:"line-number"},"10"),e("br"),e("span",{class:"line-number"},"11"),e("br"),e("span",{class:"line-number"},"12"),e("br"),e("span",{class:"line-number"},"13"),e("br"),e("span",{class:"line-number"},"14"),e("br"),e("span",{class:"line-number"},"15"),e("br"),e("span",{class:"line-number"},"16"),e("br"),e("span",{class:"line-number"},"17"),e("br"),e("span",{class:"line-number"},"18"),e("br"),e("span",{class:"line-number"},"19"),e("br"),e("span",{class:"line-number"},"20"),e("br"),e("span",{class:"line-number"},"21"),e("br"),e("span",{class:"line-number"},"22"),e("br"),e("span",{class:"line-number"},"23"),e("br"),e("span",{class:"line-number"},"24"),e("br"),e("span",{class:"line-number"},"25"),e("br")])],-1),E=e("h2",{id:"迭代遍历",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#迭代遍历","aria-hidden":"true"},"#"),t(" 迭代遍历")],-1),q=e("h3",{id:"先序遍历-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#先序遍历-1","aria-hidden":"true"},"#"),t(" 先序遍历")],-1),z=e("blockquote",null,[e("p",null,"题目描述：给定一个二叉树，返回它的前序（先序）遍历序列。"),e("p",null,"示例: 输入: [1,null,2,3]"),e("div",{class:"language-text ext-text line-numbers-mode"},[e("pre",{class:"language-text"},[e("code",null,"1\n \\\n  2\n /\n3\n")]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br")])]),e("p",null,"输出: [1,2,3]")],-1),G=e("p",null,[t("::: alert-info 一个思维工具："),e("strong",null,"递归和栈"),t("有着脱不开的干系，当可以用递归做出来的题，而需要使用其他解法，此时我们本能地往"),e("strong",null,"栈"),t("上想。 :::")],-1),H=e("p",null,"题目中的出参是一个数组（结点的值），它可以看作是是一个栈的出栈序列，因此只需要合理地安排结点入栈和出栈的时机，使结点出栈序列符合二叉树的前序遍历规则即可。",-1),I=e("p",null,[e("img",{src:l,alt:"先序遍历过程演示"})],-1),J=e("p",null,[t("前序遍历的规则是 "),e("strong",null,"先遍历根结点、然后遍历左树、最后遍历右树"),t("，这正是我们所期望的出栈序列；而按道理入栈序列和出栈序列相反， 即按道理结点入栈应该按照 "),e("code",null,"右->左->根"),t(" 的顺序，⚠️ 但我们先接触到的"),e("strong",null,"起点就是根结点"),t("，因此第一步需要将根结点执行一次先入栈，然后马上出栈的操作，保证第一次出栈是根节点。")],-1),K=e("p",null,[t("然后就在每一轮迭代中取出栈顶的元素（后 "),e("code",null,"push"),t(" 入栈的结点）作为当前的根结点，将值添加到结果数组，并将其右、左子树 "),e("code",null,"push"),t(" 到栈中，这样就可以构成所需的栈元素层叠关系，将根元素和左树先输出，后输出右树。")],-1),L=e("p",null,"先序迭代遍历的出入栈顺序：",-1),M=e("ol",null,[e("li",null,"将当前根结点入栈"),e("li",null,[t("取出栈顶结点，将结点值 "),e("code",null,"push"),t(" 进结果数组")]),e("li",null,"若栈顶结点有右孩子，则将右孩子入栈（当下下轮的结点的根结点）"),e("li",null,"若栈顶结点有左孩子，则将左孩子入栈（当下一轮的结点的根结点）")],-1),P=e("p",null,[t("重复 2、3、4 步骤，通过 "),e("code",null,"push"),t(" 和 "),e("code",null,"pop"),t("（前期会交替执行 "),e("code",null,"push"),t(" 和 "),e("code",null,"pop"),t(" 操作，后期只有一直执行 "),e("code",null,"pop"),t(" 操作） 操作直至栈空，遍历完整个二叉树。")],-1),Q=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token doc-comment comment"},[t("/**\n *\n * "),e("span",{class:"token keyword"},"@param"),t(),e("span",{class:"token class-name"},[e("span",{class:"token punctuation"},"{"),t("TreeNode"),e("span",{class:"token punctuation"},"}")]),t(),e("span",{class:"token parameter"},"root"),t("\n * "),e("span",{class:"token keyword"},"@return"),t(),e("span",{class:"token class-name"},[e("span",{class:"token punctuation"},"{"),t("number"),e("span",{class:"token punctuation"},"["),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},"}")]),t("\n */")]),t("\n"),e("span",{class:"token keyword"},"const"),t(),e("span",{class:"token function-variable function"},"preorderTraversal"),t(),e("span",{class:"token operator"},"="),t(),e("span",{class:"token keyword"},"function"),t(),e("span",{class:"token punctuation"},"("),e("span",{class:"token parameter"},"root"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t("\n  "),e("span",{class:"token comment"},"// 初始化结果数组"),t("\n  "),e("span",{class:"token keyword"},"let"),t(" res "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token punctuation"},"["),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},";"),t("\n  "),e("span",{class:"token comment"},"// 初始化栈结构"),t("\n  "),e("span",{class:"token keyword"},"let"),t(" stack "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token punctuation"},"["),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},";"),t("\n  "),e("span",{class:"token comment"},"// 迭代边界条件"),t("\n  "),e("span",{class:"token keyword"},"if"),t(),e("span",{class:"token punctuation"},"("),e("span",{class:"token operator"},"!"),t("root"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t("\n    "),e("span",{class:"token keyword"},"return"),t(" res"),e("span",{class:"token punctuation"},";"),t("\n  "),e("span",{class:"token punctuation"},"}"),t("\n  "),e("span",{class:"token comment"},"// 首先将根节点入栈"),t("\n  stack"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"push"),e("span",{class:"token punctuation"},"("),t("root"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n  "),e("span",{class:"token comment"},"// 进行迭代，当栈不为空就不断重复入栈、出栈操作"),t("\n  "),e("span",{class:"token keyword"},"while"),t(),e("span",{class:"token punctuation"},"("),t("stack"),e("span",{class:"token punctuation"},"."),t("length"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t("\n    "),e("span",{class:"token comment"},"// 将栈顶结点出栈，作为当前的根节点"),t("\n    "),e("span",{class:"token keyword"},"let"),t(" cur "),e("span",{class:"token operator"},"="),t(" stack"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"pop"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n    "),e("span",{class:"token comment"},"// 将结点值 push 到结果数组的尾部"),t("\n    res"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"push"),e("span",{class:"token punctuation"},"("),t("cur"),e("span",{class:"token punctuation"},"."),t("val"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n    "),e("span",{class:"token comment"},"// 若当前子树有右孩子，先将其入栈"),t("\n    "),e("span",{class:"token keyword"},"if"),t(),e("span",{class:"token punctuation"},"("),t("cur"),e("span",{class:"token punctuation"},"."),t("right"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t("\n      stack"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"push"),e("span",{class:"token punctuation"},"("),t("cur"),e("span",{class:"token punctuation"},"."),t("right"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n    "),e("span",{class:"token punctuation"},"}"),t("\n    "),e("span",{class:"token comment"},"// 若当前子树有左孩子，后将其入栈"),t("\n    "),e("span",{class:"token keyword"},"if"),t(),e("span",{class:"token punctuation"},"("),t("cur"),e("span",{class:"token punctuation"},"."),t("left"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t("\n      stack"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"push"),e("span",{class:"token punctuation"},"("),t("cur"),e("span",{class:"token punctuation"},"."),t("left"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t("\n    "),e("span",{class:"token punctuation"},"}"),t("\n  "),e("span",{class:"token punctuation"},"}"),t("\n\n  "),e("span",{class:"token comment"},"// 返回结果数组"),t("\n  "),e("span",{class:"token keyword"},"return"),t(" res"),e("span",{class:"token punctuation"},";"),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br"),e("span",{class:"line-number"},"10"),e("br"),e("span",{class:"line-number"},"11"),e("br"),e("span",{class:"line-number"},"12"),e("br"),e("span",{class:"line-number"},"13"),e("br"),e("span",{class:"line-number"},"14"),e("br"),e("span",{class:"line-number"},"15"),e("br"),e("span",{class:"line-number"},"16"),e("br"),e("span",{class:"line-number"},"17"),e("br"),e("span",{class:"line-number"},"18"),e("br"),e("span",{class:"line-number"},"19"),e("br"),e("span",{class:"line-number"},"20"),e("br"),e("span",{class:"line-number"},"21"),e("br"),e("span",{class:"line-number"},"22"),e("br"),e("span",{class:"line-number"},"23"),e("br"),e("span",{class:"line-number"},"24"),e("br"),e("span",{class:"line-number"},"25"),e("br"),e("span",{class:"line-number"},"26"),e("br"),e("span",{class:"line-number"},"27"),e("br"),e("span",{class:"line-number"},"28"),e("br"),e("span",{class:"line-number"},"29"),e("br"),e("span",{class:"line-number"},"30"),e("br"),e("span",{class:"line-number"},"31"),e("br"),e("span",{class:"line-number"},"32"),e("br"),e("span",{class:"line-number"},"33"),e("br"),e("span",{class:"line-number"},"34"),e("br"),e("span",{class:"line-number"},"35"),e("br")])],-1);c.render=function(e,t){return n(),s(a,null,[o,p,u,r,i,k,m,b,d,g,f,h,w,y,v,x,j,N,T,O,_,F,A,B,C,D,E,q,z,G,H,I,J,K,L,M,P,Q],64)};export default c;
