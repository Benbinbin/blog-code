import{o as n,c as s,F as a,a as e,b as l}from"./app.93fa4a4f.js";const t={},c=e("h1",{id:"数据结构",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#数据结构","aria-hidden":"true"},"#"),l(" 数据结构")],-1),o=e("p",null,"前端需要掌握的数据结构：",-1),p=e("ul",null,[e("li",null,"数组（包括复合数组）"),e("li",null,"栈"),e("li",null,"队列"),e("li",null,"链表"),e("li",null,"树（一般是二叉树）")],-1),u=e("p",null,"💡 由于 JavaScript 中字符串和数组关联紧密，关键知识点重复度较高，在解决字符串问题时可以借鉴数组的知识。",-1),r=e("h2",{id:"数组",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#数组","aria-hidden":"true"},"#"),l(" 数组")],-1),i=e("p",null,"JavaScript 原生支持数组结构，可以「开箱即用」不必自行模拟实现。",-1),k=e("h3",{id:"创建数组",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#创建数组","aria-hidden":"true"},"#"),l(" 创建数组")],-1),b=e("ul",null,[e("li",null,"方法一：方括号+元素内容")],-1),m=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token keyword"},"const"),l(" arr "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},","),l(),e("span",{class:"token number"},"2"),e("span",{class:"token punctuation"},","),l(),e("span",{class:"token number"},"3"),e("span",{class:"token punctuation"},","),l(),e("span",{class:"token number"},"4"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},";"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br")])],-1),d=e("ul",null,[e("li",null,[l("方法二：构造函数 "),e("code",null,"Array()")])],-1),g=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token comment"},"// 当以构造函数的形式创建数组时，若不传任何参数，得到的就会是一个空数组，等价于 const arr = []"),l("\n"),e("span",{class:"token keyword"},"const"),l(" arr "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token keyword"},"new"),l(),e("span",{class:"token class-name"},"Array"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br")])],-1),h=e("p",null,"💡 在算法题中我们初始化一个数组时，并不知道它内部元素的情况，推荐使用构造函数创建数组的方法",-1),v=e("p",null,[l("💡 如果需要创造"),e("strong",null,"指定长度的空数组"),l("，可以向数组构造函数传递"),e("strong",null,"一个数字作为参数")],-1),f=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token comment"},"// 得到一个长度为 7 的空数组"),l("\n"),e("span",{class:"token keyword"},"const"),l(" arr "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token keyword"},"new"),l(),e("span",{class:"token class-name"},"Array"),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"7"),e("span",{class:"token punctuation"},")"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br")])],-1),j=e("p",null,[l("如果希望每个元素指定一个值来初始化数组，可以调用 "),e("code",null,"fill()"),l(" 方法")],-1),x=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token comment"},"// 得到一个长度为7，且每个元素都初始化为1的数组"),l("\n"),e("span",{class:"token keyword"},"const"),l(" arr "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token punctuation"},"("),e("span",{class:"token keyword"},"new"),l(),e("span",{class:"token class-name"},"Array"),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"7"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"fill"),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},")"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br")])],-1),w=e("h3",{id:"数组访问",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#数组访问","aria-hidden":"true"},"#"),l(" 数组访问")],-1),y=e("p",null,"直接在中括号中指定其索引即可访问数组中特定的元素",-1),_=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token comment"},"// 访问索引下标为 0 的元素，即第一个元素"),l("\narr"),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"0"),e("span",{class:"token punctuation"},"]"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br")])],-1),F=e("h3",{id:"数组遍历",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#数组遍历","aria-hidden":"true"},"#"),l(" 数组遍历")],-1),L=e("p",null,"遍历数组即访问到数组中的每个元素，并且一般同时知道当前元素的索引。",-1),q=e("p",null,"💡 如果没有特殊的需要统一使用 for 循环来实现遍历，因为从性能上看 for 循环遍历起来是最快的。",-1),N=e("ul",null,[e("li",null,"for 循环 以循环参数作为索引，即数组的下标，通过迭代循环参数依次访问数组的每个值")],-1),S=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token comment"},"// 获取数组长度"),l("\n"),e("span",{class:"token keyword"},"const"),l(" len "),e("span",{class:"token operator"},"="),l(" arr"),e("span",{class:"token punctuation"},"."),l("length"),e("span",{class:"token punctuation"},";"),l("\n"),e("span",{class:"token comment"},"// 遍历数组"),l("\n"),e("span",{class:"token keyword"},"for"),e("span",{class:"token punctuation"},"("),e("span",{class:"token keyword"},"let"),l(" i"),e("span",{class:"token operator"},"="),e("span",{class:"token number"},"0"),e("span",{class:"token punctuation"},";"),l(" i"),e("span",{class:"token operator"},"<"),l("len"),e("span",{class:"token punctuation"},";"),l(" i"),e("span",{class:"token operator"},"++"),e("span",{class:"token punctuation"},")"),l(),e("span",{class:"token punctuation"},"{"),l("\n    "),e("span",{class:"token comment"},"// 输出数组当前元素值和索引"),l("\n    console"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"log"),e("span",{class:"token punctuation"},"("),l("arr"),e("span",{class:"token punctuation"},"["),l("i"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},","),l(" i"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\n"),e("span",{class:"token punctuation"},"}"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br")])],-1),I=e("ul",null,[e("li",null,[l("forEach 方法 通过数组特有的 "),e("code",null,"forEach()"),l(" 方法循环每一个元素，其中传入函数的"),e("strong",null,"第一个入参和第二个入参分别是当前元素的及其对应索引"),l("，在回调函数中可以进行相应的调用")])],-1),O=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[l("arr"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"forEach"),e("span",{class:"token punctuation"},"("),e("span",{class:"token parameter"},[l("item"),e("span",{class:"token punctuation"},","),l(" index")]),e("span",{class:"token punctuation"},")"),l(),e("span",{class:"token punctuation"},"{"),l("\n    "),e("span",{class:"token comment"},"// 输出数组元素值和索引"),l("\n    console"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"log"),e("span",{class:"token punctuation"},"("),l("item"),e("span",{class:"token punctuation"},","),l(" index"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\n"),e("span",{class:"token punctuation"},"}"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br")])],-1),J=e("ul",null,[e("li",null,[l("map 方法 方法 "),e("code",null,"map()"),l(" 在调用形式上与 forEach 无异，区别在于它会根据传入的函数逻辑对数组中每个元素进行处理、进而"),e("strong",null,"返回一个全新的数组"),l("。")])],-1),A=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token keyword"},"let"),l(" newArr "),e("span",{class:"token operator"},"="),l(" arr"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"map"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},"("),e("span",{class:"token parameter"},[l("item"),e("span",{class:"token punctuation"},","),l(" index")]),e("span",{class:"token punctuation"},")"),l(),e("span",{class:"token operator"},"=>"),l(),e("span",{class:"token punctuation"},"{"),l("\n    "),e("span",{class:"token comment"},"// 输出数组的元素值和索引"),l("\n    console"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"log"),e("span",{class:"token punctuation"},"("),l("item"),e("span",{class:"token punctuation"},","),l(" index"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\n    "),e("span",{class:"token comment"},"// 在当前元素基础上 + 1 作为新元素返回"),l("\n    "),e("span",{class:"token keyword"},"return"),l("  item"),e("span",{class:"token operator"},"+"),e("span",{class:"token number"},"1"),l("\n"),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},")"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br")])],-1),T=e("h3",{id:"增加元素",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#增加元素","aria-hidden":"true"},"#"),l(" 增加元素")],-1),E=e("ul",null,[e("li",null,"unshift 方法 添加元素到数组的头部")],-1),B=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token keyword"},"const"),l(" arr "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},","),l(),e("span",{class:"token number"},"2"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},";"),l("\narr"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"unshift"),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"0"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("   "),e("span",{class:"token comment"},"// [0, 1, 2]"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br")])],-1),C=e("ul",null,[e("li",null,"push 方法 添加元素到数组的尾部")],-1),Q=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token keyword"},"const"),l(" arr "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},","),l(),e("span",{class:"token number"},"2"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},";"),l("\narr"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"push"),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"3"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("   "),e("span",{class:"token comment"},"// [1, 2, 3]"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br")])],-1),z=e("ul",null,[e("li",null,"splice 方法 添加元素到数组任何位置")],-1),D=e("p",null,[l("💡 第一个入参是起始的索引值，第二个入参表示"),e("strong",null,[l("需要从起始的索引开始（包含）删除的元素个数（如果设置为 "),e("code",null,"0"),l(" 就表示不删除任何元素）")]),l("，第三个入参开始表示需要添加到数组里的元素的值")],-1),G=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token keyword"},"const"),l(" arr "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},","),l(),e("span",{class:"token number"},"2"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},";"),l("\narr"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"splice"),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},","),l(),e("span",{class:"token number"},"0"),e("span",{class:"token punctuation"},","),l(),e("span",{class:"token number"},"3"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("   "),e("span",{class:"token comment"},"// [1, 3, 2]"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br")])],-1),H=e("p",null,[l("示例从 "),e("code",null,"arr[1]"),l(" 开始，删掉 "),e("code",null,"0"),l(" 个元素，并且在索引为 "),e("code",null,"1"),l(" 的地方新增了值为 "),e("code",null,"3"),l(" 的元素，因为删掉的元素是 "),e("code",null,"0"),l(" 个，所以说 "),e("code",null,"arr[1]"),l(" 中原有的元素值 "),e("code",null,"2"),l(" 仍然会被保留下来；同时因为我们后面又指定了 "),e("code",null,"arr[1]"),l(" 处需要新增一个元素 "),e("code",null,"3"),l("，那么这个 "),e("code",null,"3"),l(" 就会把原来 "),e("code",null,"arr[1]"),l(" 这个地方的元素给「挤到后面去」，这样就做到了在数组中任意位置进行元素的新增。")],-1),K=e("p",null,[e("img",{src:"/blog-code/assets/20200810125404680_27315.91d76cf9.png",alt:"array splice"})],-1),M=e("h3",{id:"删除元素",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#删除元素","aria-hidden":"true"},"#"),l(" 删除元素")],-1),P=e("ul",null,[e("li",null,"shift 方法 删除数组头部的元素")],-1),R=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token keyword"},"const"),l(" arr "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},","),l(),e("span",{class:"token number"},"2"),e("span",{class:"token punctuation"},","),l(),e("span",{class:"token number"},"3"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},";"),l("\narr"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"shift"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("   "),e("span",{class:"token comment"},"// [2, 3]"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br")])],-1),U=e("ul",null,[e("li",null,"pop 方法 删除数组尾部的元素")],-1),V=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token keyword"},"const"),l(" arr "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},","),l(),e("span",{class:"token number"},"2"),e("span",{class:"token punctuation"},","),l(),e("span",{class:"token number"},"3"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},";"),l("\narr"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"pop"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("   "),e("span",{class:"token comment"},"// [1, 2]"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br")])],-1),W=e("ul",null,[e("li",null,"splice 方法 删除数组任意位置的元素")],-1),X=e("p",null,[l("💡 第一个入参是起始的索引值，第二个入参表示"),e("strong",null,[l("需要从起始的索引开始（包含）删除的元素个数（如果设置为 "),e("code",null,"0"),l(" 就表示不删除任何元素）")])],-1),Y=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token keyword"},"const"),l(" arr "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},","),l(),e("span",{class:"token number"},"2"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},";"),l("\narr"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"splice"),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},","),l(),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("   "),e("span",{class:"token comment"},"// [2]"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br")])],-1),Z=e("h3",{id:"二维数组",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二维数组","aria-hidden":"true"},"#"),l(" 二维数组")],-1),$=e("p",null,[l("普通常见的一维数组的元素是数字而非数组，整个数组的结构看上去像一条「线」。二维数组其实就是数组套数组，也就是"),e("strong",null,"每个元素都是数组"),l("，二维数组更像是一个「面」。")],-1),nn=e("p",null,[l("💡 在数学中形如这样长方阵列排列的复数或实数集合，被称为「矩阵」，因此二维数组的别名就叫"),e("strong",null,"矩阵"),l("。")],-1),sn=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token keyword"},"const"),l(" arr "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token punctuation"},"["),l("\n  "),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"2"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"3"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"4"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"5"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},","),l("\n  "),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"2"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"3"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"4"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"5"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},","),l("\n  "),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"2"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"3"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"4"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"5"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},","),l("\n  "),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"2"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"3"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"4"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"5"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},","),l("\n  "),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"2"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"3"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"4"),e("span",{class:"token punctuation"},","),e("span",{class:"token number"},"5"),e("span",{class:"token punctuation"},"]"),l("\n"),e("span",{class:"token punctuation"},"]"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br")])],-1),an=e("p",null,[e("img",{src:"/blog-code/assets/20200810090758932_4119.27cd9e3f.png",alt:"二维数组"})],-1),en=e("ul",null,[e("li",null,[l("图示"),e("strong",null,"每一行，就代表着一个数组元素"),l("，如第 "),e("code",null,"0"),l(" 行就代表着数组中 "),e("code",null,"arr[0]"),l(" 这个数组元素，其内容是 "),e("code",null,"[1,2,3,4,5]")]),e("li",null,[l("每一行中的每一列，则代表一个确切的值，如第 "),e("code",null,"0"),l(" 行第 "),e("code",null,"1"),l(" 列，就代表着数组中 "),e("code",null,"arr[0][1]"),l(" 这个元素，其值为"),e("code",null,"2"),l("，是一个确切的 number。")])],-1),ln=e("h4",{id:"二维数组初始化",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二维数组初始化","aria-hidden":"true"},"#"),l(" 二维数组初始化")],-1),tn=e("p",null,[l("⚠️ "),e("code",null,"fill()"),l(" 方法的局限性：当给 "),e("code",null,"fill()"),l(" 传递一个入参时，如果这个入参的类型是"),e("strong",null,"引用类型"),l("，那么填充的其实就是入参的"),e("strong",null,"引用"),l("，即所有元素都是"),e("strong",null,"对应了同一个引用、指向的是同一块内存空间，它们本质上是同一个数组"),l("。")],-1),cn=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token comment"},"// 对长度为 7 的数组进行初始化，每个元素都是一个空数组"),l("\n"),e("span",{class:"token keyword"},"const"),l(" arr "),e("span",{class:"token operator"},"="),e("span",{class:"token punctuation"},"("),e("span",{class:"token keyword"},"new"),l(),e("span",{class:"token class-name"},"Array"),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"7"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"fill"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},"["),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},")"),l("\n\n"),e("span",{class:"token comment"},"// 修改其中一个元素"),l("\narr"),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"0"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"0"),e("span",{class:"token punctuation"},"]"),l(),e("span",{class:"token operator"},"="),l(),e("span",{class:"token number"},"1"),l("\n"),e("span",{class:"token comment"},"// 实际上其他元素的值也都会跟着发生改变"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br")])],-1),on=e("p",null,[e("img",{src:"/blog-code/assets/20200810091616563_30004.cf72496f.png",alt:"fill matrix"})],-1),pn=e("p",null,[l("本着安全的原则二维数组初始化方法直接使用非常简单（而且性能也不错）的 for 循环来解决，for 循环中每一次迭代我们都通过 "),e("code",null,"[]"),l(" 创建一个新的数组，这样便不会有引用指向问题带来的尴尬。")],-1),un=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token keyword"},"const"),l(" len "),e("span",{class:"token operator"},"="),l(" arr"),e("span",{class:"token punctuation"},"."),l("length\n"),e("span",{class:"token keyword"},"for"),e("span",{class:"token punctuation"},"("),e("span",{class:"token keyword"},"let"),l(" i"),e("span",{class:"token operator"},"="),e("span",{class:"token number"},"0"),e("span",{class:"token punctuation"},";"),l(" i"),e("span",{class:"token operator"},"<"),l("len"),e("span",{class:"token punctuation"},";"),l(" i"),e("span",{class:"token operator"},"++"),e("span",{class:"token punctuation"},")"),l(),e("span",{class:"token punctuation"},"{"),l("\n    "),e("span",{class:"token comment"},"// 将数组的每一个坑位初始化为数组"),l("\n    arr"),e("span",{class:"token punctuation"},"["),l("i"),e("span",{class:"token punctuation"},"]"),l(),e("span",{class:"token operator"},"="),l(),e("span",{class:"token punctuation"},"["),e("span",{class:"token punctuation"},"]"),l("\n"),e("span",{class:"token punctuation"},"}"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br")])],-1),rn=e("h4",{id:"二维数组的访问",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二维数组的访问","aria-hidden":"true"},"#"),l(" 二维数组的访问")],-1),kn=e("p",null,"需要的是两层循环访问二维数组",-1),bn=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token comment"},"// 缓存外部数组的长度"),l("\n"),e("span",{class:"token keyword"},"const"),l(" outerLen "),e("span",{class:"token operator"},"="),l(" arr"),e("span",{class:"token punctuation"},"."),l("length"),e("span",{class:"token punctuation"},";"),l("\n"),e("span",{class:"token comment"},"// 使用两层循环遍历"),l("\n"),e("span",{class:"token keyword"},"for"),e("span",{class:"token punctuation"},"("),e("span",{class:"token keyword"},"let"),l(" i"),e("span",{class:"token operator"},"="),e("span",{class:"token number"},"0"),e("span",{class:"token punctuation"},";"),l(" i"),e("span",{class:"token operator"},"<"),l("outerLen"),e("span",{class:"token punctuation"},";"),l(" i"),e("span",{class:"token operator"},"++"),e("span",{class:"token punctuation"},")"),l(),e("span",{class:"token punctuation"},"{"),l("\n  "),e("span",{class:"token comment"},"// 缓存内部数组的长度"),l("\n  "),e("span",{class:"token keyword"},"const"),l(" innerLen "),e("span",{class:"token operator"},"="),l(" arr"),e("span",{class:"token punctuation"},"["),l("i"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},"."),l("length"),e("span",{class:"token punctuation"},";"),l("\n  "),e("span",{class:"token keyword"},"for"),e("span",{class:"token punctuation"},"("),e("span",{class:"token keyword"},"let"),l(" j"),e("span",{class:"token operator"},"="),e("span",{class:"token number"},"0"),e("span",{class:"token punctuation"},";"),l(" j"),e("span",{class:"token operator"},"<"),l("innerLen"),e("span",{class:"token punctuation"},";"),l(" j"),e("span",{class:"token operator"},"++"),e("span",{class:"token punctuation"},")"),l(),e("span",{class:"token punctuation"},"{"),l("\n    "),e("span",{class:"token comment"},"// 输出数组的值和索引"),l("\n    console"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"log"),e("span",{class:"token punctuation"},"("),l("arr"),e("span",{class:"token punctuation"},"["),l("i"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},"["),l("j"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},","),l(" i"),e("span",{class:"token punctuation"},","),l(" j"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\n  "),e("span",{class:"token punctuation"},"}"),l("\n"),e("span",{class:"token punctuation"},"}"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br"),e("span",{class:"line-number"},"10"),e("br"),e("span",{class:"line-number"},"11"),e("br")])],-1),mn=e("p",null,[l("💡 一维数组用 for 循环遍历只需一层循环，二维数组是两层，三维数组就是三层。依次类推 "),e("strong",null,"N 维数组需要 N 层循环来完成遍历"),l("。")],-1),dn=e("h2",{id:"栈和队列",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#栈和队列","aria-hidden":"true"},"#"),l(" 栈和队列")],-1),gn=e("p",null,[l("数组的增删操作可以说是没有任何限制的，允许我们在任何位置执行想要的操作。而栈和队列这两种运算受限的"),e("strong",null,"线性表"),l("完全可以把栈和队列都看作是**「特别的数组」**，它们的实现一般都要依赖于数组。")],-1),hn=e("p",null,[l("栈和队列两者的区别在于，它们各自对数组的"),e("strong",null,"增删"),l("操作有着不一样的限制：")],-1),vn=e("ul",null,[e("li",null,[e("strong",null,"栈 Stack"),l("：后进先出 LIFO，Last In First Out 的数据结构，只能用 "),e("code",null,"pop()"),l(" 和 "),e("code",null,"push()"),l(" 方法在尾部完成增删的数组")]),e("li",null,[e("strong",null,"队列 Queue"),l("：先进先出 FIFO，First In First Out 的数据结构，只能用 "),e("code",null,"shift()"),l(" 和 "),e("code",null,"push()"),l(" 方法分别在头部删除和在尾部添加元素的数组")])],-1),fn=e("h3",{id:"栈",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#栈","aria-hidden":"true"},"#"),l(" 栈")],-1),jn=e("p",null,[l("栈 Stack 是一种后进先出 LIFO，Last In First Out 的数据结构，在 JavaScript 中可以认为"),e("strong",null,"栈就是限制只能用 push 来添加元素，同时只能用 pop 来移除元素的一种特殊的数组")],-1),xn=e("ul",null,[e("li",null,[l("只允许从尾部添加元素，使用 "),e("code",null,"push()"),l(" 方法")]),e("li",null,[l("只允许从尾部取出元素，使用 "),e("code",null,"pop()"),l(" 方法")])],-1),wn=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token comment"},"// 初始状态"),l("\n"),e("span",{class:"token keyword"},"const"),l(" stack "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token punctuation"},"["),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},";"),l("\n\n"),e("span",{class:"token comment"},"// 入栈过程"),l("\nstack"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"push"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},'"可爱多"'),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\nstack"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"push"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},'"巧乐兹"'),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\nstack"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"push"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},'"光明奶砖"'),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\n\n"),e("span",{class:"token comment"},"// 出栈过程，栈不为空时一直执行下去"),l("\n"),e("span",{class:"token keyword"},"while"),e("span",{class:"token punctuation"},"("),l("stack"),e("span",{class:"token punctuation"},"."),l("length"),e("span",{class:"token punctuation"},")"),l(),e("span",{class:"token punctuation"},"{"),l("\n    "),e("span",{class:"token comment"},"// 单纯访问栈顶部元素（不出栈）"),l("\n    "),e("span",{class:"token keyword"},"const"),l(" top "),e("span",{class:"token operator"},"="),l(" stack"),e("span",{class:"token punctuation"},"["),l("stack"),e("span",{class:"token punctuation"},"."),l("length "),e("span",{class:"token operator"},"-"),l(),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},";"),l("\n    "),e("span",{class:"token comment"},"// 将顶部元素出栈"),l("\n    stack"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"pop"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\n"),e("span",{class:"token punctuation"},"}"),l("\n\n"),e("span",{class:"token comment"},"// 查看栈，栈空"),l("\nstack"),e("span",{class:"token punctuation"},";"),l("   "),e("span",{class:"token comment"},"// []"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br"),e("span",{class:"line-number"},"10"),e("br"),e("span",{class:"line-number"},"11"),e("br"),e("span",{class:"line-number"},"12"),e("br"),e("span",{class:"line-number"},"13"),e("br"),e("span",{class:"line-number"},"14"),e("br"),e("span",{class:"line-number"},"15"),e("br"),e("span",{class:"line-number"},"16"),e("br"),e("span",{class:"line-number"},"17"),e("br"),e("span",{class:"line-number"},"18"),e("br")])],-1),yn=e("h3",{id:"队列",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#队列","aria-hidden":"true"},"#"),l(" 队列")],-1),_n=e("p",null,[l("队列 queue 是一种先进先出 FIFO，First In First Out 的数据结构，在 JavaScript 中可以认为"),e("strong",null,"队列就是限制只能用 push 来添加元素，同时只能用 shift 来移除元素的一种特殊的数组")],-1),Fn=e("ul",null,[e("li",null,[l("只允许从尾部添加元素，使用方法 "),e("code",null,"push()"),l(" 方法")]),e("li",null,[l("只允许从头部移除元素，使用方法 "),e("code",null,"shift()"),l(" 方法")])],-1),Ln=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token comment"},"// 初始状态"),l("\n"),e("span",{class:"token keyword"},"const"),l(" queue "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token punctuation"},"["),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},";"),l("\n\n"),e("span",{class:"token comment"},"// 进入队列"),l("\nqueue"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"push"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'Ben'"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\nqueue"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"push"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'Tom'"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\nqueue"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"push"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'Thomson'"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\n\n"),e("span",{class:"token comment"},"// 出队列，队列不为空时一直执行下去"),l("\n"),e("span",{class:"token keyword"},"while"),e("span",{class:"token punctuation"},"("),l("queue"),e("span",{class:"token punctuation"},"."),l("length"),e("span",{class:"token punctuation"},")"),l(),e("span",{class:"token punctuation"},"{"),l("\n    "),e("span",{class:"token comment"},"// 单纯访问队列头部元素（不出队）"),l("\n    "),e("span",{class:"token keyword"},"const"),l(" top "),e("span",{class:"token operator"},"="),l(" queque"),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"0"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token punctuation"},";"),l("\n    console"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"log"),e("span",{class:"token punctuation"},"("),l("top"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\n    "),e("span",{class:"token comment"},"// 出队"),l("\n    queue"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"shift"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\n"),e("span",{class:"token punctuation"},"}"),l("\n\n"),e("span",{class:"token comment"},"// 查看队列，队空"),l("\nqueue"),e("span",{class:"token punctuation"},";"),l("   "),e("span",{class:"token comment"},"// []"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br"),e("span",{class:"line-number"},"10"),e("br"),e("span",{class:"line-number"},"11"),e("br"),e("span",{class:"line-number"},"12"),e("br"),e("span",{class:"line-number"},"13"),e("br"),e("span",{class:"line-number"},"14"),e("br"),e("span",{class:"line-number"},"15"),e("br"),e("span",{class:"line-number"},"16"),e("br"),e("span",{class:"line-number"},"17"),e("br"),e("span",{class:"line-number"},"18"),e("br"),e("span",{class:"line-number"},"19"),e("br")])],-1),qn=e("h2",{id:"链表",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#链表","aria-hidden":"true"},"#"),l(" 链表")],-1),Nn=e("p",null,[l("链表和数组类似，是另一种线性结构的有序列表，有且仅有一个"),e("strong",null,"前驱"),l("、有且仅有一个"),e("strong",null,"后继"),l("。JS 中的链表是以嵌套的对象的形式来实现的")],-1),Sn=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token punctuation"},"{"),l("\n    "),e("span",{class:"token comment"},"// 数据域"),l("\n    val"),e("span",{class:"token operator"},":"),l(),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},","),l("\n    "),e("span",{class:"token comment"},"// 指针域，指向下一个结点"),l("\n    next"),e("span",{class:"token operator"},":"),l(),e("span",{class:"token punctuation"},"{"),l("\n        val"),e("span",{class:"token operator"},":"),l(),e("span",{class:"token number"},"2"),e("span",{class:"token punctuation"},","),l("\n        next"),e("span",{class:"token operator"},":"),l(),e("span",{class:"token operator"},"..."),l("\n    "),e("span",{class:"token punctuation"},"}"),l("\n"),e("span",{class:"token punctuation"},"}"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br")])],-1),In=e("ul",null,[e("li",null,[e("strong",null,"数据域"),l("：存储的是当前结点所存储的数据值")]),e("li",null,[e("strong",null,"指针域"),l("：代表下一个结点（后继结点）的引用， 有了 "),e("code",null,"next"),l(" 指针来记录后继结点的引用，每一个结点至少都能知道自己后面的元素，原本相互独立的结点之间就有了如下的联系。要想访问链表中的任何一个元素，我们都得从起点结点开始，逐个访问 next，一直访问到目标结点为止。")])],-1),On=e("p",null,[e("img",{src:"/blog-code/assets/20200810142048503_13748.799445a1.png",alt:"list pivot"})],-1),Jn=e("p",null,[l("💡 为了确保起点结点是可抵达的，我们有时还会设定一个 "),e("code",null,"head"),l(" 指针来专门指向链表的开始位置。")],-1),An=e("p",null,[e("img",{src:"/blog-code/assets/20200810142631715_21563.a97c6feb.png",alt:"list head"})],-1),Tn=e("h3",{id:"链表和数组异同",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#链表和数组异同","aria-hidden":"true"},"#"),l(" 链表和数组异同")],-1),En=e("p",null,"链表和数组不同点在于：",-1),Bn=e("ul",null,[e("li",null,[l("链表中数据单位的名称叫做「结点」，而结点和结点的分布"),e("strong",null,"在内存中可以是离散的"),l("。 "),e("img",{src:"/blog-code/assets/20200810141429080_14550.bd60b2ca.png",alt:"linked list"})]),e("li",null,[l("数组在内存中最为关键的一个特征，就是元素与元素之间紧紧相连，它们一般是"),e("strong",null,"对应一段位于自己上界和下界之间的、一段连续的内存空间"),l("。")])],-1),Cn=e("p",null,[e("img",{src:"/blog-code/assets/20200810141221255_22302.c568da21.png",alt:"array"})],-1),Qn=e("p",null,[l("正是由于数组中的元素是连续的，每个元素的内可存地址以根据其索引距离数组头部的距离来计算出来，因此对数组来说，每一个元素都可以"),e("strong",null,"通过数组的索引下标直接定位"),l("。")],-1),zn=e("p",null,[l("但对链表来说，元素和元素之间似乎毫无内存上的瓜葛可言，但是通过创建指针来实现元素之间的关联，每一个结点的结构都包括了两部分的内容："),e("strong",null,"数据域"),l("和"),e("strong",null,"指针域"),l("。")],-1),Dn=e("p",null,"💡 链表和数组的优缺点：",-1),Gn=e("ul",null,[e("li",null,[l("链表的插入/删除效率较高，而访问效率较低（需要使用指针 "),e("code",null,"next"),l(" 遍历前面的元素才可以访问到目标元素）")]),e("li",null,"数组的访问效率较高（直接使用索引定位访问元素），而插入效率较低（如果要在任意位置删除一个元素，那么该位置往后的所有元素，都需要往前挪一个位置；如果要在任意位置新增一个元素，那么该位置往后的所有元素也都要往后挪一个位置。）")],-1),Hn=e("h3",{id:"链表结点的创建",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#链表结点的创建","aria-hidden":"true"},"#"),l(" 链表结点的创建")],-1),Kn=e("p",null,"定义一个构造函数用以创建链表节点",-1),Mn=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token keyword"},"function"),l(),e("span",{class:"token function"},"ListNode"),e("span",{class:"token punctuation"},"("),e("span",{class:"token parameter"},"val"),e("span",{class:"token punctuation"},")"),l(),e("span",{class:"token punctuation"},"{"),l("\n    "),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),l("val "),e("span",{class:"token operator"},"="),l(" val"),e("span",{class:"token punctuation"},";"),l("\n    "),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),l("next "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token keyword"},"null"),e("span",{class:"token punctuation"},";"),l("\n"),e("span",{class:"token punctuation"},"}"),l("\n\n"),e("span",{class:"token comment"},"// 在使用构造函数创建结点时，传入 val （数据域对应的值内容）、指定 next （下一个链表结点）即可"),l("\n"),e("span",{class:"token keyword"},"const"),l(" node1 "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token keyword"},"new"),l(),e("span",{class:"token class-name"},"ListNode"),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\n"),e("span",{class:"token keyword"},"const"),l(" node2 "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token keyword"},"new"),l(),e("span",{class:"token class-name"},"ListNode"),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"2"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\nnode1"),e("span",{class:"token punctuation"},"."),l("next "),e("span",{class:"token operator"},"="),l(" node2"),e("span",{class:"token punctuation"},";"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br")])],-1),Pn=e("p",null,[e("img",{src:"/blog-code/assets/20200810142949999_1970.14462d84.png",alt:"list node"})],-1),Rn=e("h3",{id:"链表元素的添加",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#链表元素的添加","aria-hidden":"true"},"#"),l(" 链表元素的添加")],-1),Un=e("p",null,[l("💡 链表的结点间关系是通过 "),e("code",null,"next"),l(" 指针来维系的，因此链表元素的添加本质上都是在围绕 "),e("code",null,"next"),l(" 指针做文章。")],-1),Vn=e("ul",null,[e("li",null,[l("直接在链表尾部添加结点，改变最后一个 "),e("code",null,"next"),l(" 指针即可")])],-1),Wn=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token keyword"},"const"),l(" node3 "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token keyword"},"new"),l(),e("span",{class:"token class-name"},"ListNode"),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"3"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\nnode2"),e("span",{class:"token punctuation"},"."),l("next "),e("span",{class:"token operator"},"="),l(" node3"),e("span",{class:"token punctuation"},";"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br")])],-1),Xn=e("p",null,[e("img",{src:"/blog-code/assets/20200810143621289_5334.87af98da.png",alt:"list append node"})],-1),Yn=e("ul",null,[e("li",null,[l("在任意两结点间插入一个新结点，需要变更的是"),e("strong",null,"前驱结点"),l("和"),e("strong",null,"目标结点"),l("的 "),e("code",null,"next"),l(" 指针指向")])],-1),Zn=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token comment"},"// 创建结点"),l("\n"),e("span",{class:"token keyword"},"const"),l(" node3 "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token keyword"},"new"),l(),e("span",{class:"token class-name"},"ListNode"),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"3"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\n"),e("span",{class:"token comment"},"// 修改前驱结点和目标结点的指针域，将结点插入到两个结点间"),l("\n"),e("span",{class:"token comment"},"// 把 node3 的 next 指针指向 node2"),l("\nnode3"),e("span",{class:"token punctuation"},"."),l("next "),e("span",{class:"token operator"},"="),l(" node1"),e("span",{class:"token punctuation"},"."),l("next"),e("span",{class:"token punctuation"},";"),l("\n"),e("span",{class:"token comment"},"// 把 node1 的 next 指针修改为指向 node3"),l("\nnode1"),e("span",{class:"token punctuation"},"."),l("next "),e("span",{class:"token operator"},"="),l(" node3"),e("span",{class:"token punctuation"},";"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br")])],-1),$n=e("p",null,[e("img",{src:"/blog-code/assets/20200810144133969_14530.0a2dc610.png",alt:"list insert node"})],-1),ns=e("h3",{id:"链表元素的删除",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#链表元素的删除","aria-hidden":"true"},"#"),l(" 链表元素的删除")],-1),ss=e("p",null,[l("💡 链表元素的删除也是非常高频的操作，⚠️ 删除的标准是：在链表的遍历过程中，无法再遍历到某个结点的存在。我们直接让需要删除的目标结点的的前驱结点 "),e("code",null,"next"),l(" 指针跳过它，指向需要删除的目标结点的后继即可，因此仍然把重心放在对 "),e("code",null,"next"),l(" 指针的调整上。当一个结点完全不可抵达时， JavaScript 的垃圾回收器就会自动回收掉。")],-1),as=e("p",null,[l("💡 涉及链表删除操作的题目中，重点不是定位目标结点，而是"),e("strong",null,"定位目标结点的前驱结点"),l("。")],-1),es=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token comment"},"// 删除 node3 结点"),l("\nnode1"),e("span",{class:"token punctuation"},"."),l("next "),e("span",{class:"token operator"},"="),l(" node3"),e("span",{class:"token punctuation"},"."),l("next"),e("span",{class:"token punctuation"},";"),l("\n\n"),e("span",{class:"token comment"},"// 实现相同功能的另一种写法，只需要拿到前驱结点 node1 即可"),l("\n"),e("span",{class:"token comment"},"// 利用 node1 定位 node3 及其后继结点"),l("\n"),e("span",{class:"token keyword"},"const"),l(" target "),e("span",{class:"token operator"},"="),l(" node1"),e("span",{class:"token punctuation"},"."),l("next"),e("span",{class:"token punctuation"},";"),l("\n"),e("span",{class:"token comment"},"// 重定向"),l("\nnode1"),e("span",{class:"token punctuation"},"."),l("next "),e("span",{class:"token operator"},"="),l(" target"),e("span",{class:"token punctuation"},"."),l("next"),e("span",{class:"token punctuation"},";"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br")])],-1),ls=e("p",null,[e("img",{src:"/blog-code/assets/20200810145112241_25894.eaae7f82.png",alt:"list delete node"})],-1),ts=e("h2",{id:"树",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#树","aria-hidden":"true"},"#"),l(" 树")],-1),cs=e("p",null,"数据结构中的树是对现实世界中树的一层简化：",-1),os=e("ul",null,[e("li",null,"把树根抽象为「根结点」"),e("li",null,"树枝抽象为「边」"),e("li",null,"树枝的两个端点抽象为「结点」"),e("li",null,"树叶抽象为「叶子结点」")],-1),ps=e("p",null,[e("img",{src:"/blog-code/assets/20200811093248984_26365.32b0bd20.png",alt:"tree"})],-1),us=e("p",null,[l("把这棵抽象后的树颠倒一下，就得到了计算机中的树结构。"),e("strong",null,"树的层次计算规则：根结点所在的那一层记为第一层，其子结点所在的就是第二层，以此类推。")],-1),rs=e("p",null,[e("img",{src:"/blog-code/assets/20200811093559640_18965.8c756b2a.png",alt:"tree"})],-1),is=e("p",null,"相关概念：",-1),ks=e("ul",null,[e("li",null,"结点高度：叶子结点高度记为 1，每向上一层高度就加 1，逐层向上累加至目标结点时，所得到的的值就是目标结点的高度。"),e("li",null,"树的高度：树中结点的最大高度，称为「树的高度」。"),e("li",null,[l("度：一个结点开叉出去多少个子树，被记为结点的「度」。比如上图中根结点的度就是 "),e("code",null,"3")]),e("li",null,[l("叶子结点：叶子结点就是度为 "),e("code",null,"0"),l(" 的结点，因为它们是最后一层的结点")])],-1),bs=e("h3",{id:"二叉树",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二叉树","aria-hidden":"true"},"#"),l(" 二叉树")],-1),ms=e("p",null,[l("二叉树是指满足以下要求的树：它可以没有根结点，作为一棵空树存在；如果它不是空树，那么必须由根结点、左子树和右子树组成，"),e("strong",null,"且左右子树都是二叉树"),l("。")],-1),ds=e("p",null,[e("img",{src:"/blog-code/assets/20200811100330184_22834.035c5a3b.png",alt:"Binary Tree"})],-1),gs=e("p",null,[l("⚠️ "),e("strong",null,"二叉树不能被简单定义为每个结点的度都是 2 的树"),l("，因为普通的树并不会区分左子树和右子树，但与之区别的是在二叉树中，左右子树的位置是严格约定、不能交换的。")],-1),hs=e("h3",{id:"二叉树实现",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#二叉树实现","aria-hidden":"true"},"#"),l(" 二叉树实现")],-1),vs=e("p",null,"在 JS 中，二叉树使用对象来定义。它的结构分为三块：",-1),fs=e("ul",null,[e("li",null,"数据域"),e("li",null,"左侧子结点（左子树根结点）的引用"),e("li",null,"右侧子结点（右子树根结点）的引用")],-1),js=e("p",null,"通过构造函数创建结点，把左侧子结点和右侧子结点都预置为空，再设置结点的左右引用即可创建二叉树",-1),xs=e("div",{class:"language-javascript ext-js line-numbers-mode"},[e("pre",{class:"language-javascript"},[e("code",null,[e("span",{class:"token comment"},"// 二叉树结点的构造函数"),l("\n"),e("span",{class:"token keyword"},"function"),l(),e("span",{class:"token function"},"TreeNode"),e("span",{class:"token punctuation"},"("),e("span",{class:"token parameter"},"val"),e("span",{class:"token punctuation"},")"),l(),e("span",{class:"token punctuation"},"{"),l("\n    "),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),l("val "),e("span",{class:"token operator"},"="),l(" val"),e("span",{class:"token punctuation"},";"),l("\n    "),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),l("left "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token keyword"},"this"),e("span",{class:"token punctuation"},"."),l("right "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token keyword"},"null"),e("span",{class:"token punctuation"},";"),l("\n"),e("span",{class:"token punctuation"},"}"),l("\n\n"),e("span",{class:"token comment"},"// 新建一个二叉树结点"),l("\n"),e("span",{class:"token keyword"},"const"),l(" node "),e("span",{class:"token operator"},"="),l(),e("span",{class:"token keyword"},"new"),l(),e("span",{class:"token class-name"},"TreeNode"),e("span",{class:"token punctuation"},"("),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),l("\n"),e("span",{class:"token comment"},"// 然后可以基于这个结点为根结点，我们可以通过给 left/right 赋值拓展其子树信息，延展出一棵二叉树"),l("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br")])],-1),ws=e("p",null,[e("img",{src:"/blog-code/assets/20200811101809271_22176.84fb45c8.png",alt:"Binary Tree Constructor"})],-1);t.render=function(e,l){return n(),s(a,null,[c,o,p,u,r,i,k,b,m,d,g,h,v,f,j,x,w,y,_,F,L,q,N,S,I,O,J,A,T,E,B,C,Q,z,D,G,H,K,M,P,R,U,V,W,X,Y,Z,$,nn,sn,an,en,ln,tn,cn,on,pn,un,rn,kn,bn,mn,dn,gn,hn,vn,fn,jn,xn,wn,yn,_n,Fn,Ln,qn,Nn,Sn,In,On,Jn,An,Tn,En,Bn,Cn,Qn,zn,Dn,Gn,Hn,Kn,Mn,Pn,Rn,Un,Vn,Wn,Xn,Yn,Zn,$n,ns,ss,as,es,ls,ts,cs,os,ps,us,rs,is,ks,bs,ms,ds,gs,hs,vs,fs,js,xs,ws],64)};export default t;
