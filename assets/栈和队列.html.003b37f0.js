import{d as n}from"./app.93fa4a4f.js";const s={},a=n('<h1 id="栈和队列" tabindex="-1"><a class="header-anchor" href="#栈和队列" aria-hidden="true">#</a> 栈和队列</h1><h2 id="有效括号问题" tabindex="-1"><a class="header-anchor" href="#有效括号问题" aria-hidden="true">#</a> 有效括号问题</h2><blockquote><p>题目描述：给定一个只包括 <code>&#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39;</code> 的字符串，判断字符串是否有效。 💡 有效字符串需满足左括号必须用相同类型的右括号闭合。左括号必须以正确的顺序闭合。注意空字符串可被认为是有效字符串。</p><p>示例 1：输入：<code>&quot;()&quot;</code> 输出：<code>true</code> 示例 2：输入：<code>&quot;()[]{}&quot;</code> 输出：<code>true</code> 示例 3：输入：<code>&quot;(]&quot;</code> 输出：<code>false</code> 示例 4：输入：<code>&quot;([)]&quot;</code> 输出：<code>false</code> 示例 5：输入：<code>&quot;{[]}&quot;</code> 输出：<code>true</code></p></blockquote><p>题目中若涉及括号问题，则很有可能和栈相关。因为括号配对成立意味字符串是有<strong>对称性</strong>的，而根据<strong>栈的后进先出原则，一组数据的入栈和出栈顺序刚好是对称的</strong>。</p><p>在遍历字符串的过程时，使用一个空数组作为栈，存储遍历到的左括号时，如遍历到了 <code>(</code>，就往栈里 <code>push</code> 相应的右括号 <code>)</code>；当遍历到右括号时，就将其与栈当前 <code>pop</code>出来的顶部元素作比较（使用 <code>pop</code> 取出顶部的元素来进行比较，可以确保栈顶的括号总是与下一个需要被匹配的左括号相应的右括号）。由于栈这种数据结构遵循<strong>后进先出</strong>原则，而如果字符串满足对称性，相应的右括号会在较外侧，也是较后才会被遍历到。</p><p>不仅使用栈的<strong>进栈出栈</strong>有序性进行比较，还可以及时地丢掉比对成功的括号，<strong>最后判断栈是否为空</strong>，即可直到所有遍历到的左括号是否有相应的右括号配对了。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">/</span> 使用一个对象模拟 map 记录左右括号的对应关系\n<span class="token keyword">const</span> leftToRight <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">&quot;(&quot;</span><span class="token operator">:</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;{&quot;</span><span class="token operator">:</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;[&quot;</span><span class="token operator">:</span> <span class="token string">&quot;]&quot;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 用数组列出所有左侧括号</span>\n<span class="token keyword">const</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;{&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;[&quot;</span><span class="token punctuation">]</span>\n\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>\n */</span>\n\n<span class="token keyword">function</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 先判断是否为空字符串</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 初始化 stack 数组</span>\n  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n\n  <span class="token comment">// 遍历字符串</span>\n  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 读取当前索引字符串所对应的字符</span>\n    <span class="token keyword">let</span> ch <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token comment">// 判读是否为左括号，如果是就 push 相应的右括号到栈中</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>leftToRight<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果遍历字符为右括号，就和当前 pop 出的栈顶部元素作对比（如果栈还存在元素时）</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span>length <span class="token operator">||</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!==</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 遍历字符串后，栈刚好也清空，表示括号完全匹配，返回 true</span>\n  <span class="token keyword">return</span> <span class="token operator">!</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h2 id="每日温度问题" tabindex="-1"><a class="header-anchor" href="#每日温度问题" aria-hidden="true">#</a> 每日温度问题</h2><blockquote><p>题目描述：根据每日气温列表，请重新生成一个列表，对应位置的输出是<strong>需要再等待多久温度才会升高超过该日温度的天数</strong>。如果之后都不会升高，请在该位置用 <code>0</code> 来代替。</p><p>例如，给定一个列表 <code>temperatures = [73, 74, 75, 71, 69, 72, 76, 73]</code>，你的输出应该是 <code>[1, 1, 4, 2, 1, 1, 0, 0]</code>。💡 气温列表长度的范围是 <code>[1, 30000]</code>。每个气温的值的均为华氏度，都是在 <code>[30, 100]</code> 范围内的整数。</p></blockquote><p>可以使用最直观的暴力遍历法：直接两层遍历，第一层定位一个温度，第二层定位离这个温度最近的一次升温是哪天，然后求出两个温度对应索引的差值即可，但是会出现多次重复比较的情况，而且两次遍历时间复杂度是 O(n^2)。</p><p>使用栈记录元素的索引，并维持为一个<strong>递减栈</strong>（即栈记录的索引所对应的元素值是依次递减的），如果遍历时遇到不是递减的元素，就求出索引差值，并及时将不必要的数据出栈，避免它对我们后续的遍历产生干扰，同时可以帮我们避免重复操作，将时间复杂度降低到 O(n)。</p><p>📺 具体步骤参考<a href="https://www.bilibili.com/video/BV12t4y1274o/" target="_blank" rel="noopener noreferrer">该视频</a>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">T</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>\n */</span>\n\n<span class="token keyword">function</span> <span class="token function">dailyTemp</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  <span class="token comment">// 初始化递减栈</span>\n  <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token comment">// 初始化结果数组，长度与输入数组 arr 相同，初始占位值为 0</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 遍历数组</span>\n  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 当栈不为空，且当前遍历的元素的值「打破」元素值递减的规定</span>\n    <span class="token comment">// 并将栈顶部元素（是 arr 中元素的索引）出栈，并（索引）差值记录在结果数组中</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>arr<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">let</span> distance <span class="token operator">=</span> i <span class="token operator">-</span> top<span class="token punctuation">;</span>\n      result<span class="token punctuation">[</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> distance<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 将当前的元素的索引入栈，等待与其后元素作对比</span>\n    <span class="token comment">// 注意栈里存的不是温度值，而是索引值</span>\n    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 返回结果数组</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="最小栈问题" tabindex="-1"><a class="header-anchor" href="#最小栈问题" aria-hidden="true">#</a> 最小栈问题</h2><blockquote><p>题目描述：设计一个支持 <code>push</code> ，<code>pop</code> ，<code>top</code> 操作，并能在常数时间内检索到最小元素的栈。 <code>push(x)</code> —— 将元素 <code>x</code> 推入栈中。 <code>pop()</code> —— 删除栈顶的元素。 <code>top()</code> —— 获取栈顶元素。 <code>getMin()</code> —— 检索栈中的最小元素。</p><p>示例: <code>let minStack = new MinStack();</code><code>minStack.push(-2);</code><code>minStack.push(0);</code><code>minStack.push(-3);</code><code>minStack.getMin();</code> --&gt; 返回 -3. <code>minStack.pop();</code><code>minStack.top();</code> --&gt; 返回 0. <code>minStack.getMin();</code> --&gt; 返回 -2.</p></blockquote><p>其中前三个操作：<code>push</code>、<code>pop</code> 和 <code>top</code> 可以利用数组的方法和索引实现，而 <code>getMin</code> 这个接口可以使用遍历读取到当前数组中最小值，但是对栈进行了一次遍历，时间复杂度无疑是 O(n)。为了提升时间效率，可以付出更多的空间占用作为代价。在这道题里，可以考虑再使用一个<strong>递减栈</strong> <code>stack2</code> 作为辅助，通过以下规则，让这个栈去容纳当前的最小值，即<strong>从栈底到栈顶呈递减趋势的栈</strong>：</p><ul><li>取最小值：由于整个栈从栈底到栈顶递减，因此栈顶元素就是最小元素。</li><li>若有新元素入栈：判断是不是比栈顶元素还要小，否则不准进入 stack2。</li><li>若有元素出栈：判断是不是和栈顶元素相等，如果是的话，stack2 也要出栈。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token comment">// 辅助的递减栈</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>stack2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">x</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">void</span><span class="token punctuation">}</span></span>\n */</span>\n<span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 若入栈的值笔递减栈顶部的值（最小值），则推入辅助栈</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">void</span><span class="token punctuation">}</span></span>\n */</span>\n<span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 若 stack 出栈的值与辅助栈 stack2 顶部的元素相同（最小值），则同时将辅助栈顶部值出栈</span>\n  <span class="token comment">// 保证辅助栈顶部的值是栈 stack 最小值</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>\n */</span>\n<span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">top</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * return <span class="token punctuation">{</span>number<span class="token punctuation">}</span>\n */</span>\n<span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getMin</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 辅助栈 stack2 顶部元素就是原始栈 stack 的最小值</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h2 id="用栈实现一个队列" tabindex="-1"><a class="header-anchor" href="#用栈实现一个队列" aria-hidden="true">#</a> 用栈实现一个队列</h2><blockquote><p>题目描述：使用栈实现队列的下列操作： <code>push(x)</code>——将一个元素放入队列的尾部。 <code>pop()</code>——从队列首部移除元素。 <code>peek()</code>——返回队列首部的元素。 <code>empty()</code>——返回队列是否为空。</p><p>示例： <code>let queue = new MyQueue();</code><code>queue.push(1);</code><code>queue.push(2);</code><code>queue.peek();</code> // 返回 1 <code>queue.pop();</code> // 返回 1 <code>queue.empty();</code> // 返回 false 💡 你只能使用标准的栈操作模拟队列——也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。假设所有操作都是有效的（例如，一个空的队列不会调用 pop 或者 peek 操作）。</p></blockquote><p>栈，后进先出；队列，先进先出。用栈实现队列，说白了就是用栈实现先进先出的效果，再说直接点，就是<strong>想办法让栈底的元素首先被取出</strong>，也就是让出栈序列被逆序，一个栈做不到的事情，我们用两个栈。</p><p>如果要添加元素到栈中，就按照原来栈的操作；只要需要取出元素时，就先将所有元素从 <code>stack1</code> 「转移」到 <code>stack2</code>，实现元素的逆序，然后再出栈，这样就可以「模拟」先进先出的队列规则（💡 如果后来有元素添加进来 <code>stack1</code>，那么下一次需要取出元素时，<strong>应该等到 <code>stack2</code> 元素全部取出</strong>，再将 <code>stack1</code> 中这些新添加的元素全部「转移」到 <code>stack2</code> ，先实现逆序中再进行出栈）</p><p>通过两个栈，分别执行「接受」元素，和「取出」元素的功能，模拟队列先进先出的功能；当两个栈都为空时，模拟的队列才为空。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 初始化两个栈</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>stack1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>stack2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * Push element to stack1, back of queue\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">x</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token keyword">void</span><span class="token punctuation">}</span></span>\n */</span>\n<span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * Remove the element from in front of queue and return the element\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>\n */</span>\n<span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 如果 stack2 为空，将 stack1 所有元素转移到 stack2，元素逆序后再从 stack2 出栈</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 当 stack1 不为空时，转移全部元素</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 出栈在 stack2 中完成</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * Get the front element\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span>\n * 这个方法和 pop 唯一的区别就是没有将定位到的值出栈\n */</span>\n<span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">peek</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 当 stack1 不为空时，转移全部元素</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 返回 stack2 中栈顶元素</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/**\n * Return whether the queue is empty\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>\n */</span>\n<span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">empty</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 若 stack1 和 stack2 均为空，那么队列空</span>\n  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><h2 id="滑动窗口问题" tabindex="-1"><a class="header-anchor" href="#滑动窗口问题" aria-hidden="true">#</a> 滑动窗口问题</h2><p>双端队列就是允许在队列的两端进行插入和删除的队列。体现在编码上，最常见的载体是既允许使用 <code>pop</code>、<code>push</code> 同时又允许使用 <code>shift</code>、<code>unshift</code> 的数组。双端队列衍生出的滑动窗口问题。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment">// 定义一个双端队列</span>\nqueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 双端队列尾部入队</span>\nqueue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 双端队列尾部出队</span>\nqueue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 双端队列头部出队</span>\nqueue<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 双端队列头部入队</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>题目描述：给定一个数组 <code>nums</code> 和滑动窗口的大小 <code>k</code>，请找出所有滑动窗口里的最大值。</p><p>示例：输入：<code>nums = [1,3,-1,-3,5,3,6,7]</code>, 和 <code>k = 3</code> 输出：<code>[3,3,5,5,6,7]</code> 💡 你可以假设 <code>k</code> 总是有效的，在输入数组不为空的情况下，<code>1 ≤ k ≤ 输入数组的大小</code> 滑动窗口的位置： <code>[1 3 - 1] - 3 5 3 6 7</code><code>1[3 - 1 - 3] 5 3 6 7</code><code>1 3[-1 - 3 5] 3 6 7</code><code>1 3 - 1[-3 5 3] 6 7</code><code>1 3 - 1 - 3[5 3 6] 7</code><code>1 3 - 1 - 3 5[3 6 7]</code> 最大值分别对应：<code>3 3 5 5 6 7</code></p></blockquote><p>直观解法是直接模拟题中描述的这个过程，使用双指针约束一个窗口（范围），然后每次窗口移动后遍历其中的元素，返回最大值即可。但是这种解法需要嵌套循环，外层循环一共走了 <code>n-k+1</code> 次，每次内层循环固定执行 <code>k</code> 次，因此时间复杂度简化后用大 O 表示法可以记为 O(kn)。</p><p>当滑动窗口前进一步的时候，如果减少的数不是当前最大值，增加的数也没有超越当前最大值，则最大值仍然不变，即 <code>push</code> 到结果数组中的元素和前一个元素一样，因此可以只需要考察新增和删除元素即可基于不同情况即可知道新窗口中最大值。</p><p>双端队列可以完美地帮助我们达到这个目的，其核心的思路是维护一个有效的<strong>递减队列</strong>，这样就可以确保队头元素始终是当前窗口的最大值，可以将时间复杂度优化到 O(n)。</p><p>在遍历数组的前期（第一个窗口），尝试将遍历到的每一个元素都推入队列内部；然后在之后移动窗口时，只需要尝试推入右侧元素即可。而且每尝试推入一个元素前，都把这个元素与队列尾部的元素作对比，根据对比结果的不同，采取不同的措施：</p><ul><li>如果试图推入的元素大于队尾元素，则意味着队列的递减趋势被打破了，此时我们需要将队列尾部的元素依次出队（由于是双端队列，所以队尾出队是没有问题的），<strong>直到队尾元素大于等于当前元素为止</strong>，此时再将当前元素入队。</li><li>如果试图推入的元素小于队列尾部的元素，那么就不需要额外的操作，直接把当前元素入队即可。</li><li>要考虑最大值可能在左侧由于窗口的移动被移除的情况，因此需要将双端队列的队头元素与窗口左侧移出的元素比对（因为最大元素在队头，而且根据元素进队的规则，如果窗口左侧的值不比右侧的值大，不可能还留在队列中，因此不需要遍历整个队列来比对），如果相同则需要将其同步 <code>shift</code> 移除出双端队列，确保<strong>队列的有效性</strong>。</li></ul><p>💡 当遍历到的元素个数达到了 <code>k</code> 个时（完成第一个窗口所有元素的遍历），意味着滑动窗口的第一个最大值已经产生了，应该把它 <code>push</code> 进结果数组里；然后每移动一次窗口完成递减双端队列「重整」后，将队列的队头元素作为当前窗口的最大值 <code>push</code> 到结果数组中。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span> <span class="token parameter">nums</span>\n * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token parameter">k</span>\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>\n */</span>\n\n<span class="token keyword">function</span> <span class="token function">maxSlideWindow</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  <span class="token comment">// 初始化结果数组</span>\n  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token comment">// 初始化双端队列</span>\n  <span class="token keyword">let</span> deque <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token comment">// 遍历数组 nums</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 判断当前元素与双端队列的队尾元素大小关系</span>\n    <span class="token comment">// 队尾元素不断 pop 出队，直至队尾元素大于或等于当前元素</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>deque<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>deque<span class="token punctuation">[</span>deque<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      deque<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 将当前元素的索引 push 到「重整」好的双端队列中</span>\n    deque<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 检查队列的队头元素是否已被排除到窗口之外</span>\n    <span class="token comment">// 通过索引来比较</span>\n    <span class="token keyword">while</span> <span class="token punctuation">(</span>deque<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> deque<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> i <span class="token operator">-</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 将队头元素（数组 nums 的索引）出队</span>\n      deque<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 判断滑动窗口的状态，是否完成第一个窗口的元素遍历</span>\n    <span class="token comment">// 只有被遍历的元素大于 k 时，才在每一次遍历中将双端队列的队首元素 push 到结果数组中</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>deque<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 返回结果数组</span>\n  <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div>',35);s.render=function(n,s){return a};export default s;
