import{o as e,c as l,F as a,a as n,b as s}from"./app.93fa4a4f.js";const r={},c=n("h1",{id:"docker-简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#docker-简介","aria-hidden":"true"},"#"),s(" Docker 简介")],-1),o=n("h2",{id:"原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#原理","aria-hidden":"true"},"#"),s(" 原理")],-1),u=n("p",null,"Docker 使用 Linux 中各种隔离技术，为每一个进程提供一个独立的容器：",-1),i=n("ul",null,[n("li",null,"Namespaces：为进程树、网络接口、挂载点进行隔离，实现进程间的通信"),n("li",null,"CGroups：隔离 CPU、内存、磁盘 I/O、网络带宽"),n("li",null,"Unionfs：联合文件系统、镜像")],-1),d=n("h3",{id:"namespaces",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#namespaces","aria-hidden":"true"},"#"),s(" Namespaces")],-1),t=n("p",null,"NameSpaces 工具可以对进程进行隔离",-1),p=n("p",null,[n("img",{src:"/blog-code/assets/namespaces.d5d93c2b.png",alt:"namespaces"})],-1),h=n("p",null,"宿主机是运行着 Docker 引擎的主机，沙箱即容器，通过 Docker 创建的隔离的空间，独立地运行着各种进程。",-1),g=n("p",null,[s("通过"),n("strong",null,"网桥模式"),s("对网络进行隔离：为每一个容器创建一个虚拟网卡")],-1),f=n("p",null,[n("img",{src:"/blog-code/assets/namespaces-2.7aa663b0.png",alt:"网桥模式"})],-1),b=n("h3",{id:"cgroups",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#cgroups","aria-hidden":"true"},"#"),s(" CGroups")],-1),m=n("p",null,"CGroups 工具隔离共享的资源，如 CPU、内存、磁盘 I/O、网络带宽等，而每一容器进行配容，限制其调用共享资源的额度。",-1),k=n("p",null,[n("img",{src:"/blog-code/assets/CGroups.5ce2f81e.png",alt:"CGroups"})],-1),C=n("h3",{id:"unionfs",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#unionfs","aria-hidden":"true"},"#"),s(" Unionfs")],-1),D=n("p",null,"Unionfs 将文件系统中相同部分和不同部分分别处理，然后通过联合文件系统将这些文件以叠加的方式挂载起来，构成一个完整的文件系统供不同容器使用，同时节省出大量的磁盘空间。",-1),x=n("p",null,[n("img",{src:"/blog-code/assets/Unionfs.acb86e8e.png",alt:"Unionfs"})],-1),G=n("p",null,[s("文件系统中只读层称为"),n("strong",null,"镜像"),s("，可写层称为"),n("strong",null,"容器"),s("。")],-1),U=n("p",null,[n("img",{src:"/blog-code/assets/CGroups-2.369b9aac.png",alt:"镜像与容器"})],-1),S=n("p",null,"💡 Docker 提供一个容器，相对于虚拟机更有优势。",-1),O=n("p",null,[n("img",{src:"/blog-code/assets/why-docker.27147ea8.png",alt:"VM VS. Container"})],-1),v=n("p",null,"虚拟机方案：对于每个虚拟机都需要一个独立的操作系统 Guest OS",-1),y=n("p",null,"Dock 方案：共享一个系统 Host OS，通过 Docker 引擎为每一个用户分配独立的容器，更节省资源",-1),N=n("p",null,"💡 虚拟机有一个独立的操作系统，启动后会一直运行；Docker 则在命令运行结束后就退出容器，下次需要执行命令时，再重新创建容器。",-1),I=n("h2",{id:"架构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#架构","aria-hidden":"true"},"#"),s(" 架构")],-1),P=n("p",null,"Docker 的基本架构是 Client-Server 客户端-后台结构",-1),R=n("p",null,[n("img",{src:"/blog-code/assets/docker-architecture.2664fd35.svg",alt:"architecture"})],-1),V=n("ul",null,[n("li",null,"Client 与用户进行交互，接受输入命令，管理容器、镜像，还有运行程序"),n("li",null,"Server 创建容器，需要先拉取镜像，优先从本地拉取，本地没有就到 Registry 拉取"),n("li",null,"Registry 镜像托管仓库")],-1);r.render=function(n,s){return e(),l(a,null,[c,o,u,i,d,t,p,h,g,f,b,m,k,C,D,x,G,U,S,O,v,y,N,I,P,R,V],64)};export default r;
