import{o as n,c as s,F as a,a as l,b as e}from"./app.93fa4a4f.js";const t={},o=l("h1",{id:"算法性能",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#算法性能","aria-hidden":"true"},"#"),e(" 算法性能")],-1),c=l("p",null,"评价算法的能力的两个纬度：",-1),p=l("ul",null,[l("li",null,"时间复杂度"),l("li",null,"空间复杂度")],-1),u=l("h2",{id:"时间复杂度",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#时间复杂度","aria-hidden":"true"},"#"),e(" 时间复杂度")],-1),r=l("p",null,[e("算法的时间复杂度反映的不是算法的逻辑代码到底被执行了多少次，而是"),l("strong",null,"随着输入规模的增大，算法对应的执行总次数的一个变化趋势"),e("。一般对 "),l("code",null,"T(n)"),e(" 做如下处理实现从 计算 "),l("code",null,"T(n)"),e(" -> 推导 "),l("code",null,"O(n)")],-1),i=l("ul",null,[l("li",null,[e("若 "),l("code",null,"T(n)"),e(" 是常数，那么无脑简化为 "),l("code",null,"1")]),l("li",null,[e("若 "),l("code",null,"T(n)"),e(" 是多项式如 "),l("code",null,"3n^2 + 5n + 3"),e("，我们"),l("strong",null,"只保留次数最高那一项"),e("，并且将其常数系数无脑改为 "),l("code",null,"1")])],-1),k=l("div",{class:"language-javascript ext-js line-numbers-mode"},[l("pre",{class:"language-javascript"},[l("code",null,[l("span",{class:"token keyword"},"function"),e(),l("span",{class:"token function"},"traverse"),l("span",{class:"token punctuation"},"("),l("span",{class:"token parameter"},"arr"),l("span",{class:"token punctuation"},")"),e(),l("span",{class:"token punctuation"},"{"),e("\n    "),l("span",{class:"token keyword"},"const"),e(" len "),l("span",{class:"token operator"},"="),e(" arr"),l("span",{class:"token punctuation"},"."),e("length\n    "),l("span",{class:"token keyword"},"for"),l("span",{class:"token punctuation"},"("),l("span",{class:"token keyword"},"let"),e(" i"),l("span",{class:"token operator"},"="),l("span",{class:"token number"},"0"),l("span",{class:"token punctuation"},";"),e("i"),l("span",{class:"token operator"},"<"),e("len"),l("span",{class:"token punctuation"},";"),e("i"),l("span",{class:"token operator"},"++"),l("span",{class:"token punctuation"},")"),e(),l("span",{class:"token punctuation"},"{"),e("\n        console"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"log"),l("span",{class:"token punctuation"},"("),e("arr"),l("span",{class:"token punctuation"},"["),e("i"),l("span",{class:"token punctuation"},"]"),l("span",{class:"token punctuation"},")"),e("\n    "),l("span",{class:"token punctuation"},"}"),e("\n"),l("span",{class:"token punctuation"},"}"),e("\n")])]),l("div",{class:"line-numbers"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br")])],-1),m=l("p",null,"以上代码计算机执行运算的步骤",-1),b=l("ul",null,[l("li",null,[e("函数里的第一行代码 "),l("code",null,"const len = arr.length"),e("，它只会被执行 "),l("code",null,"1"),e(" 次")]),l("li",null,[e("循环体 "),l("code",null,"console.log(arr[i])"),e(" 在 for 循环跑了 "),l("code",null,"n"),e(" 次，因此这条语句就会被执行 "),l("code",null,"n"),e(" 次 "),l("ul",null,[l("li",null,[e("其中初始化语句 "),l("code",null,"let i = 0"),e(" 只有执行了 "),l("code",null,"1"),e(" 次")]),l("li",null,[e("其中判断语句 "),l("code",null,"i < len"),e(" 执行的次数就是 "),l("code",null,"n+1"),e(" 次。有个规律是"),l("strong",null,"在所有的 for 循环里，判断语句都会比递增语句多执行一次"),e("。")]),l("li",null,[e("其中递增语句 "),l("code",null,"i++"),e(" 被执行 "),l("code",null,"n"),e(" 次")])])])],-1),d=l("p",null,[e("将总的执行次数记为 "),l("code",null,"T(n)"),e("，以上实例代码执行的次数为："),l("code",null,"T(n) = 1 + n + 1 + (n+1) + n = 3n + 3"),e("，然后通过简化处理得到算法的时间复杂度")],-1),g=l("div",{class:"language-text ext-text line-numbers-mode"},[l("pre",{class:"language-text"},[l("code",null,"T(n) = 10\nO(n) = 1\n\nT(n) = 3n^2 + 5n + 3\nO(n) = n^2\n")]),l("div",{class:"line-numbers"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br")])],-1),h=l("p",null,[e("此外我们一般只要直接抓主要矛盾实现目测得到算法的 "),l("code",null,"O(n)"),e(" 值，就可以衡量算法在数据规模变化时时间复杂度了")],-1),y=l("div",{class:"language-javascript ext-js line-numbers-mode"},[l("pre",{class:"language-javascript"},[l("code",null,[l("span",{class:"token comment"},"// 对于循环只需要关心其最内层那个循环体被执行多少次就行了"),e("\n\n"),l("span",{class:"token comment"},"// 规模为 n 的一维数组遍历时，最内层的循环会执行 n 次，其对应的时间复杂度是 O(n)"),e("\n"),l("span",{class:"token keyword"},"function"),e(),l("span",{class:"token function"},"traverse1"),l("span",{class:"token punctuation"},"("),l("span",{class:"token parameter"},"arr"),l("span",{class:"token punctuation"},")"),e(),l("span",{class:"token punctuation"},"{"),e("\n    "),l("span",{class:"token keyword"},"const"),e(" len "),l("span",{class:"token operator"},"="),e(" arr"),l("span",{class:"token punctuation"},"."),e("length\n    "),l("span",{class:"token keyword"},"for"),l("span",{class:"token punctuation"},"("),l("span",{class:"token keyword"},"let"),e(" i"),l("span",{class:"token operator"},"="),l("span",{class:"token number"},"0"),l("span",{class:"token punctuation"},";"),e("i"),l("span",{class:"token operator"},"<"),e("len"),l("span",{class:"token punctuation"},";"),e("i"),l("span",{class:"token operator"},"++"),l("span",{class:"token punctuation"},")"),e(),l("span",{class:"token punctuation"},"{"),e("\n        console"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"log"),l("span",{class:"token punctuation"},"("),e("arr"),l("span",{class:"token punctuation"},"["),e("i"),l("span",{class:"token punctuation"},"]"),l("span",{class:"token punctuation"},")"),e("\n    "),l("span",{class:"token punctuation"},"}"),e("\n"),l("span",{class:"token punctuation"},"}"),e("\n\n"),l("span",{class:"token comment"},"// 规模为 n*n 的二维数组遍历时，最内层的循环会执行 n*n 次，其对应的时间复杂度是 O(n^2)"),e("\n"),l("span",{class:"token keyword"},"function"),e(),l("span",{class:"token function"},"traverse2"),l("span",{class:"token punctuation"},"("),l("span",{class:"token parameter"},"arr"),l("span",{class:"token punctuation"},")"),e(),l("span",{class:"token punctuation"},"{"),e("\n    "),l("span",{class:"token keyword"},"const"),e(" outLen "),l("span",{class:"token operator"},"="),e(" arr"),l("span",{class:"token punctuation"},"."),e("length\n\n    "),l("span",{class:"token keyword"},"for"),l("span",{class:"token punctuation"},"("),l("span",{class:"token keyword"},"let"),e(" i"),l("span",{class:"token operator"},"="),l("span",{class:"token number"},"0"),l("span",{class:"token punctuation"},";"),e("i"),l("span",{class:"token operator"},"<"),e("outLen"),l("span",{class:"token punctuation"},";"),e("i"),l("span",{class:"token operator"},"++"),l("span",{class:"token punctuation"},")"),e(),l("span",{class:"token punctuation"},"{"),e("\n        "),l("span",{class:"token keyword"},"const"),e(" inLen "),l("span",{class:"token operator"},"="),e(" arr"),l("span",{class:"token punctuation"},"["),e("i"),l("span",{class:"token punctuation"},"]"),l("span",{class:"token punctuation"},"."),e("length\n\n        "),l("span",{class:"token keyword"},"for"),l("span",{class:"token punctuation"},"("),l("span",{class:"token keyword"},"let"),e(" j"),l("span",{class:"token operator"},"="),l("span",{class:"token number"},"0"),l("span",{class:"token punctuation"},";"),e("j"),l("span",{class:"token operator"},"<"),e("inLen"),l("span",{class:"token punctuation"},";"),e("j"),l("span",{class:"token operator"},"++"),l("span",{class:"token punctuation"},")"),e(),l("span",{class:"token punctuation"},"{"),e("\n            console"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"log"),l("span",{class:"token punctuation"},"("),e("arr"),l("span",{class:"token punctuation"},"["),e("i"),l("span",{class:"token punctuation"},"]"),l("span",{class:"token punctuation"},"["),e("j"),l("span",{class:"token punctuation"},"]"),l("span",{class:"token punctuation"},")"),e("\n        "),l("span",{class:"token punctuation"},"}"),e("\n    "),l("span",{class:"token punctuation"},"}"),e("\n"),l("span",{class:"token punctuation"},"}"),e("\n\n"),l("span",{class:"token comment"},"// 以此类推，规模为 n*m 的二维数组最内层循环会执行 n*m 次，其对应的时间复杂度就是 O(n*m)"),e("\n"),l("span",{class:"token comment"},"// 规模为 n*n*n 的三维数组最内层循环会执行 n^3 次，因此其对应的时间复杂度就表示为 O(n^3)"),e("\n")])]),l("div",{class:"line-numbers"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br"),l("span",{class:"line-number"},"7"),l("br"),l("span",{class:"line-number"},"8"),l("br"),l("span",{class:"line-number"},"9"),l("br"),l("span",{class:"line-number"},"10"),l("br"),l("span",{class:"line-number"},"11"),l("br"),l("span",{class:"line-number"},"12"),l("br"),l("span",{class:"line-number"},"13"),l("br"),l("span",{class:"line-number"},"14"),l("br"),l("span",{class:"line-number"},"15"),l("br"),l("span",{class:"line-number"},"16"),l("br"),l("span",{class:"line-number"},"17"),l("br"),l("span",{class:"line-number"},"18"),l("br"),l("span",{class:"line-number"},"19"),l("br"),l("span",{class:"line-number"},"20"),l("br"),l("span",{class:"line-number"},"21"),l("br"),l("span",{class:"line-number"},"22"),l("br"),l("span",{class:"line-number"},"23"),l("br"),l("span",{class:"line-number"},"24"),l("br"),l("span",{class:"line-number"},"25"),l("br")])],-1),v=l("p",null,[e("💡 时间复杂度除了多项式以外，还可以是对数 "),l("code",null,"logn")],-1),f=l("div",{class:"language-javascript ext-js line-numbers-mode"},[l("pre",{class:"language-javascript"},[l("code",null,[l("span",{class:"token comment"},"// 读取一个一维数组作为入参，然后对其中的元素进行跳跃式的输出"),e("\n"),l("span",{class:"token keyword"},"function"),e(),l("span",{class:"token function"},"fn"),l("span",{class:"token punctuation"},"("),l("span",{class:"token parameter"},"arr"),l("span",{class:"token punctuation"},")"),e(),l("span",{class:"token punctuation"},"{"),e("\n    "),l("span",{class:"token keyword"},"const"),e(" len "),l("span",{class:"token operator"},"="),e(" arr"),l("span",{class:"token punctuation"},"."),e("length\n    "),l("span",{class:"token keyword"},"for"),l("span",{class:"token punctuation"},"("),l("span",{class:"token keyword"},"let"),e(" i"),l("span",{class:"token operator"},"="),l("span",{class:"token number"},"1"),l("span",{class:"token punctuation"},";"),e(" i"),l("span",{class:"token operator"},"<"),e("len"),l("span",{class:"token punctuation"},";"),e(" i"),l("span",{class:"token operator"},"="),e("i"),l("span",{class:"token operator"},"*"),l("span",{class:"token number"},"2"),l("span",{class:"token punctuation"},")"),e(),l("span",{class:"token punctuation"},"{"),e("\n        console"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"log"),l("span",{class:"token punctuation"},"("),e("arr"),l("span",{class:"token punctuation"},"["),e("i"),l("span",{class:"token punctuation"},"]"),l("span",{class:"token punctuation"},")"),e("\n    "),l("span",{class:"token punctuation"},"}"),e("\n"),l("span",{class:"token punctuation"},"}"),e("\n")])]),l("div",{class:"line-numbers"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br"),l("span",{class:"line-number"},"7"),l("br")])],-1),w=l("p",null,[e("假设 i 在以 "),l("code",null,"i=i*2"),e(" 的规则递增了 x 次之后，"),l("code",null,"i<n"),e(" 开始不成立（反过来说也就是 "),l("code",null,"i>=n"),e(" 成立）。那么此时我们要计算的其实就是这样一个数学方程："),l("span",{class:"katex"},[l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.703492em","vertical-align":"-0.0391em"}}),l("span",{class:"mord"},[l("span",{class:"mord"},"2"),l("span",{class:"msupsub"},[l("span",{class:"vlist-t"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.664392em"}},[l("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[l("span",{class:"pstrut",style:{height:"2.7em"}}),l("span",{class:"sizing reset-size6 size3 mtight"},[l("span",{class:"mord mathnormal mtight"},"x")])])])])])])]),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},">="),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.43056em","vertical-align":"0em"}}),l("span",{class:"mord mathnormal"},"n")])])]),e("， 解得 "),l("span",{class:"katex"},[l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.5782em","vertical-align":"-0.0391em"}}),l("span",{class:"mord mathnormal"},"x"),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}}),l("span",{class:"mrel"},">="),l("span",{class:"mspace",style:{"margin-right":"0.2777777777777778em"}})]),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.93858em","vertical-align":"-0.24414em"}}),l("span",{class:"mop"},[l("span",{class:"mop"},[e("lo"),l("span",{style:{"margin-right":"0.01389em"}},"g")]),l("span",{class:"msupsub"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.20696799999999996em"}},[l("span",{style:{top:"-2.4558600000000004em","margin-right":"0.05em"}},[l("span",{class:"pstrut",style:{height:"2.7em"}}),l("span",{class:"sizing reset-size6 size3 mtight"},[l("span",{class:"mord mtight"},[l("span",{class:"mord mtight"},"2")])])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.24414em"}},[l("span")])])])])]),l("span",{class:"mspace",style:{"margin-right":"0.16666666666666666em"}}),l("span",{class:"mord mathnormal"},"n")])])]),e(" 其中 "),l("code",null,"x"),e(" 是循环次数")],-1),x=l("p",null,[e("因此以上算法的复杂度为 "),l("code",null,"O(n) = logn")],-1),j=l("p",null,[e("常见的时间复杂度按照从小到大的顺序排列： "),l("img",{src:"/blog-code/assets/20200812092825583_32643.7d99cde3.png",alt:"时间复杂度"})],-1),O=l("h2",{id:"空间复杂度",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#空间复杂度","aria-hidden":"true"},"#"),e(" 空间复杂度")],-1),T=l("p",null,[e("空间复杂度是对一个"),l("strong",null,"算法在运行过程中临时占用存储空间大小的量度"),e("。和时间复杂度相似，它是内存增长的趋势。 常见的空间复杂度有 O(1)、O(n) 和 O(n^2)。")],-1),z=l("div",{class:"language-javascript ext-js line-numbers-mode"},[l("pre",{class:"language-javascript"},[l("code",null,[l("span",{class:"token keyword"},"function"),e(),l("span",{class:"token function"},"traverse"),l("span",{class:"token punctuation"},"("),l("span",{class:"token parameter"},"arr"),l("span",{class:"token punctuation"},")"),e(),l("span",{class:"token punctuation"},"{"),e("\n    "),l("span",{class:"token keyword"},"const"),e(" len "),l("span",{class:"token operator"},"="),e(" arr"),l("span",{class:"token punctuation"},"."),e("length\n    "),l("span",{class:"token keyword"},"for"),l("span",{class:"token punctuation"},"("),l("span",{class:"token keyword"},"let"),e(" i"),l("span",{class:"token operator"},"="),l("span",{class:"token number"},"0"),l("span",{class:"token punctuation"},";"),e("i"),l("span",{class:"token operator"},"<"),e("len"),l("span",{class:"token punctuation"},";"),e("i"),l("span",{class:"token operator"},"++"),l("span",{class:"token punctuation"},")"),e(),l("span",{class:"token punctuation"},"{"),e("\n        console"),l("span",{class:"token punctuation"},"."),l("span",{class:"token function"},"log"),l("span",{class:"token punctuation"},"("),e("arr"),l("span",{class:"token punctuation"},"["),e("i"),l("span",{class:"token punctuation"},"]"),l("span",{class:"token punctuation"},")"),e("\n    "),l("span",{class:"token punctuation"},"}"),e("\n"),l("span",{class:"token punctuation"},"}"),e("\n")])]),l("div",{class:"line-numbers"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br")])],-1),L=l("p",null,[e("以上实例运行时有 3 个变量占用内存空间："),l("code",null,"arr"),e("、"),l("code",null,"len"),e("、"),l("code",null,"i"),e("。尽管咱们做了很多次循环，但是这些都是时间上的开销；循环体在执行时并没有开辟新的内存空间，因此整个 "),l("code",null,"traverse"),e(" 函数对内存的占用量是恒定的，它对应的空间复杂度就是 O(1)。")],-1),F=l("div",{class:"language-javascript ext-js line-numbers-mode"},[l("pre",{class:"language-javascript"},[l("code",null,[l("span",{class:"token keyword"},"function"),e(),l("span",{class:"token function"},"init"),l("span",{class:"token punctuation"},"("),l("span",{class:"token parameter"},"n"),l("span",{class:"token punctuation"},")"),e(),l("span",{class:"token punctuation"},"{"),e("\n    "),l("span",{class:"token keyword"},"let"),e(" arr "),l("span",{class:"token operator"},"="),e(),l("span",{class:"token punctuation"},"["),l("span",{class:"token punctuation"},"]"),e("\n    "),l("span",{class:"token keyword"},"for"),l("span",{class:"token punctuation"},"("),l("span",{class:"token keyword"},"let"),e(" i"),l("span",{class:"token operator"},"="),l("span",{class:"token number"},"0"),l("span",{class:"token punctuation"},";"),e("i"),l("span",{class:"token operator"},"<"),e("n"),l("span",{class:"token punctuation"},";"),e("i"),l("span",{class:"token operator"},"++"),l("span",{class:"token punctuation"},")"),e(),l("span",{class:"token punctuation"},"{"),e("\n        arr"),l("span",{class:"token punctuation"},"["),e("i"),l("span",{class:"token punctuation"},"]"),e(),l("span",{class:"token operator"},"="),e(" i\n    "),l("span",{class:"token punctuation"},"}"),e("\n    "),l("span",{class:"token keyword"},"return"),e(" arr\n"),l("span",{class:"token punctuation"},"}"),e("\n")])]),l("div",{class:"line-numbers"},[l("span",{class:"line-number"},"1"),l("br"),l("span",{class:"line-number"},"2"),l("br"),l("span",{class:"line-number"},"3"),l("br"),l("span",{class:"line-number"},"4"),l("br"),l("span",{class:"line-number"},"5"),l("br"),l("span",{class:"line-number"},"6"),l("br"),l("span",{class:"line-number"},"7"),l("br")])],-1),_=l("p",null,[e("以上实例中 "),l("code",null,"init"),e(" 函数运行时有 3 个变量占用内存："),l("code",null,"n"),e("、"),l("code",null,"arr"),e("、"),l("code",null,"i"),e("。其中变量 "),l("code",null,"arr"),e(" 不是一个一成不变的数组，它最终的大小是由输入的 "),l("code",null,"n"),e(" 的大小决定的，它会随着 "),l("code",null,"n"),e(" 的增大而增大、呈一个线性关系，因此这个算法的空间复杂度就是 O(n)。")],-1),q=l("p",null,"类似地，假如需要初始化的是一个规模为 n*n 的数组，那么它的空间复杂度就是 O(n^2) 啦。",-1);t.render=function(l,e){return n(),s(a,null,[o,c,p,u,r,i,k,m,b,d,g,h,y,v,f,w,x,j,O,T,z,L,F,_,q],64)};export default t;
